{
  "address": "0x172EB62a4Cab82735d9615666B5Da583bfDBfD19",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInsertOtherSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721NotApprovedOrOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TokenAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedSlotLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoNamingPermission",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCorrectSlotIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProofProverLessThanRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SNCodeNotAllow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlotAlreadyUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StatusNotAllow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "MEP1002TokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "MEP1004TokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "slotIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "SNCodeType",
          "type": "uint256"
        }
      ],
      "name": "InsertToMEP1002Slot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "MEP1004TokenUpdateName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "MEP1002TokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "item",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "MEP1002TokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "MEP1004TokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "item",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IMEP1004.LocationProof",
          "name": "locationProof",
          "type": "tuple"
        }
      ],
      "name": "NewLocationProof",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "MEP1002TokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "MEP1004TokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "slotIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "SNCodeType",
          "type": "uint256"
        }
      ],
      "name": "RemoveFromMEP1002Slot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MEP1002TokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_MEP1004TokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_item",
          "type": "string"
        }
      ],
      "name": "LocationProofs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "__Controllable_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExitFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_item",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_batchSize",
          "type": "uint256"
        }
      ],
      "name": "getLocationProofs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "MEP1002TokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "MEP1004TokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "item",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMEP1004.LocationProof[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSNCode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mep1002Id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slotIndex",
          "type": "uint256"
        }
      ],
      "name": "insertToMEP1002Slot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_item",
          "type": "string"
        }
      ],
      "name": "latestLocationProofs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "MEP1002TokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "MEP1004TokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "item",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMEP1004.LocationProof",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_SNCode",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mep1002Id",
          "type": "uint256"
        }
      ],
      "name": "numInsertedSlots",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "payExitFee",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mep1002Id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slotIndex",
          "type": "uint256"
        }
      ],
      "name": "removeFromMEP1002Slot",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mep1002Id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slotIndex",
          "type": "uint256"
        }
      ],
      "name": "removeFromMEP1002SlotAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "resetName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "exitFee_",
          "type": "uint256"
        }
      ],
      "name": "setExitFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "MEP1002Addr_",
          "type": "address"
        }
      ],
      "name": "setMEP1002Addr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mnsToken_",
          "type": "address"
        }
      ],
      "name": "setMNSToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nameWrapperTokenId",
          "type": "uint256"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "slotLimits_",
          "type": "uint256[]"
        }
      ],
      "name": "setSlotLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slotLimits",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "whereSlot",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8dff1650dd3e409dcb4f51741b962fe87388e7b46599f4fc383433151a9ae31",
  "receipt": {
    "to": null,
    "from": "0x245237D8cD588F0999c38331EBc97C337c007F2e",
    "contractAddress": "0x172EB62a4Cab82735d9615666B5Da583bfDBfD19",
    "transactionIndex": 3,
    "gasUsed": "4979287",
    "logsBloom": "0x
    "blockHash": "0xcedbaff88ed2f39c6b8d2d7312497bce1ba7f80dc17e6f2c9d37c346a09bc4ec",
    "transactionHash": "0xb8dff1650dd3e409dcb4f51741b962fe87388e7b46599f4fc383433151a9ae31",
    "logs": [],
    "blockNumber": 618641,
    "cumulativeGasUsed": "5256083",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "31e86350016b0cc3c5cec83c61c71655",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInsertOtherSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedSlotLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoNamingPermission\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCorrectSlotIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofProverLessThanRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SNCodeNotAllow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlotAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StatusNotAllow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"MEP1002TokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"MEP1004TokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"SNCodeType\",\"type\":\"uint256\"}],\"name\":\"InsertToMEP1002Slot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MEP1004TokenUpdateName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"MEP1002TokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"item\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"MEP1002TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"MEP1004TokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"item\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMEP1004.LocationProof\",\"name\":\"locationProof\",\"type\":\"tuple\"}],\"name\":\"NewLocationProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"MEP1002TokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"MEP1004TokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"SNCodeType\",\"type\":\"uint256\"}],\"name\":\"RemoveFromMEP1002Slot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MEP1002TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_MEP1004TokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_item\",\"type\":\"string\"}],\"name\":\"LocationProofs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"__Controllable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExitFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_item\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchSize\",\"type\":\"uint256\"}],\"name\":\"getLocationProofs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"MEP1002TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"MEP1004TokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"item\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IMEP1004.LocationProof[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSNCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mep1002Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slotIndex\",\"type\":\"uint256\"}],\"name\":\"insertToMEP1002Slot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_item\",\"type\":\"string\"}],\"name\":\"latestLocationProofs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"MEP1002TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"MEP1004TokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"item\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IMEP1004.LocationProof\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_SNCode\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mep1002Id\",\"type\":\"uint256\"}],\"name\":\"numInsertedSlots\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"payExitFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mep1002Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slotIndex\",\"type\":\"uint256\"}],\"name\":\"removeFromMEP1002Slot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mep1002Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slotIndex\",\"type\":\"uint256\"}],\"name\":\"removeFromMEP1002SlotAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resetName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exitFee_\",\"type\":\"uint256\"}],\"name\":\"setExitFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"MEP1002Addr_\",\"type\":\"address\"}],\"name\":\"setMEP1002Addr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mnsToken_\",\"type\":\"address\"}],\"name\":\"setMNSToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nameWrapperTokenId\",\"type\":\"uint256\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"slotLimits_\",\"type\":\"uint256[]\"}],\"name\":\"setSlotLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotLimits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"whereSlot\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"LocationProofs(uint256,uint256[],string)\":{\"details\":\"Submit the location proofs of anything.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getLocationProofs(string,uint256,uint256)\":{\"details\":\"get the recent location proofs of anything.\"},\"getStatus(uint256)\":{\"details\":\"Returns the status of the token.\"},\"insertToMEP1002Slot(uint256,uint256,uint256)\":{\"details\":\"Inserts the MEP1004 token to the specified slot within a MEP1002 token.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"latestLocationProofs(string)\":{\"details\":\"get the latest location proofs of anything.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"numInsertedSlots(uint256)\":{\"details\":\"Returns the number of slots inserted with the MEP1004 token in the specified MEP1002 token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"removeFromMEP1002Slot(uint256,uint256,uint256)\":{\"details\":\"Removes the MEP1004 token from the specified slot within a MEP1002 token.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"slotLimits()\":{\"details\":\"Returns the limit number of slots that can be inserted with the MEP1002 token.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"whereSlot(uint256)\":{\"details\":\"search the MEP1004 token in the specified slot within a MEP1002 token.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/MEP1004Token.sol\":\"MEP1004Token\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb8d68221343ed784c7b76edb6a686cb65e49c476d9e22bb89a5c0c3947ff14db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1599637b52d20dc3954cea44914b2a4a9a8a5caade58d9da947e0b6c9acc07ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xac29c453f4cf43afe4c9599374b6e1ed493c18644d814554e8a5969aaa6f3486\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x2c98457c4171d86094adf9a4fd8cd2402b7e3e309e961f07910a60a576dd100f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/common/ControllableUpgradeable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport {\\nOwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract ControllableUpgradeable is OwnableUpgradeable {\\n\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyController {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n\\n    function __Controllable_init(address _admin) public onlyInitializing {\\n        __Ownable_init();\\n        controllers[_admin] = true;\\n        emit ControllerChanged(_admin, true);\\n    }\\n\\n    /**\\n * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n        assembly {\\n            sstore(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103, newOwner)\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd79fb481928ffdfd5a09fcce69b7a35b940f09b9740b036407ef4657fb3d4de5\"},\"contracts/mns/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"contracts/mns/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/mns/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"contracts/mns/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"contracts/mns/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"},\"contracts/token/IMEP1004.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IMEP1004 /*is IERC721*/ {\\r\\n\\r\\n    struct LocationProof {\\r\\n        uint256 MEP1002TokenId;\\r\\n        uint256[] MEP1004TokenIds;\\r\\n        string item;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n\\r\\n    event NewLocationProof(\\r\\n        uint256 indexed MEP1002TokenId,\\r\\n        string item,\\r\\n        LocationProof locationProof\\r\\n    );\\r\\n\\r\\n    // Returns the encrypted S/N code of the device.\\r\\n    function getSNCode(uint256 _tokenId) external view returns (string memory);\\r\\n\\r\\n    // Submit the location proofs of anything.\\r\\n    function LocationProofs(uint256 _MEP1002TokenId, uint256[] memory _MEP1004TokenIds, string memory _item) external;\\r\\n\\r\\n    // get the latest location proofs of anything.\\r\\n    function latestLocationProofs(string memory _item) external view returns (LocationProof memory);\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xcdd410eeed0703a1b47e7737f8758962824bfcdfd4460d838eb3fe4d21fbf938\",\"license\":\"MIT\"},\"contracts/token/MEP1004Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {\\r\\nERC721EnumerableUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {\\r\\nStringsUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\r\\nimport {\\r\\nUUPSUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport {\\r\\nAddressUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\nimport {ControllableUpgradeable} from \\\"../common/ControllableUpgradeable.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport {Proxied} from \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\r\\nimport {IMEP1004} from \\\"./IMEP1004.sol\\\";\\r\\nimport {INameWrapper} from \\\"../mns/wrapper/INameWrapper.sol\\\";\\r\\n\\r\\n\\r\\n    error ERC721InvalidTokenId();\\r\\n    error ERC721NotApprovedOrOwner();\\r\\n    error ERC721TokenAlreadyMinted();\\r\\n    error SNCodeNotAllow();\\r\\n    error ProofProverLessThanRequired();\\r\\n    error AlreadyInsertOtherSlot();\\r\\n    error ExceedSlotLimit();\\r\\n    error SlotAlreadyUsed();\\r\\n    error NotCorrectSlotIndex();\\r\\n    error StatusNotAllow();\\r\\n    error NoDebt();\\r\\n    error NoNamingPermission();\\r\\n    error InsufficientFee();\\r\\n\\r\\ncontract MEP1004Token is\\r\\nIMEP1004,\\r\\nERC721EnumerableUpgradeable,\\r\\nControllableUpgradeable,\\r\\nProxied,\\r\\nUUPSUpgradeable\\r\\n{\\r\\n\\r\\n\\r\\n    using AddressUpgradeable for address payable;\\r\\n\\r\\n    using StringsUpgradeable for uint256;\\r\\n\\r\\n    event InsertToMEP1002Slot(\\r\\n        uint256 indexed MEP1002TokenId,\\r\\n        uint256 indexed MEP1004TokenId,\\r\\n        uint256 indexed slotIndex,\\r\\n        uint256 SNCodeType\\r\\n    );\\r\\n\\r\\n    event RemoveFromMEP1002Slot(\\r\\n        uint256 indexed MEP1002TokenId,\\r\\n        uint256 indexed MEP1004TokenId,\\r\\n        uint256 indexed slotIndex,\\r\\n        uint256 SNCodeType\\r\\n    );\\r\\n\\r\\n    event MEP1004TokenUpdateName(uint256 indexed tokenId, string name);\\r\\n\\r\\n    mapping(string => LocationProof[]) private _locationProofs;\\r\\n\\r\\n    mapping(uint256 => string) private _SNCodes;\\r\\n\\r\\n    mapping(uint256 => mapping(uint256 => uint256[])) private _MEP1002Slot;\\r\\n\\r\\n    // tokenId => slotIndex => [MEP1002TokenId, SNCodeType, slotIndex]\\r\\n    mapping(uint256 => uint256[3]) private _whereSlot;\\r\\n\\r\\n    // 0 = normal, 1 = debt\\r\\n    mapping(uint256 => uint256) private _MEP1004Status;\\r\\n\\r\\n    mapping(uint256 => string) private _MEP1004TokenNames;\\r\\n\\r\\n    string private _baseUri;\\r\\n\\r\\n    address private _mnsToken;\\r\\n\\r\\n    address private _MEP1002Addr;\\r\\n\\r\\n    uint256[] private _slotLimits;\\r\\n\\r\\n    uint256 private _exitFee;\\r\\n\\r\\n\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address _admin\\r\\n    ) external proxied initializer {\\r\\n        __Controllable_init(_admin);\\r\\n        assembly {\\r\\n            sstore(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103, _admin)\\r\\n        }\\r\\n        _slotLimits = [10, 50];\\r\\n        _exitFee = 50 ether;\\r\\n        __UUPSUpgradeable_init();\\r\\n        __ERC721_init(name_, symbol_);\\r\\n    }\\r\\n\\r\\n    function mint(address to, string memory _SNCode) external onlyController {\\r\\n        if (bytes(_SNCode).length == 0) {\\r\\n            revert ERC721TokenAlreadyMinted();\\r\\n        }\\r\\n        uint256 tokenId = uint256(keccak256(bytes(_SNCode)));\\r\\n        if (_exists(tokenId)) {\\r\\n            revert ERC721TokenAlreadyMinted();\\r\\n        }\\r\\n        if (getSNCodeType(_SNCode) == type(uint256).max) {\\r\\n            revert SNCodeNotAllow();\\r\\n        }\\r\\n        _safeMint(to, tokenId);\\r\\n        _SNCodes[tokenId] = _SNCode;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory baseURI_) external onlyController {\\r\\n        _baseUri = baseURI_;\\r\\n    }\\r\\n\\r\\n    function setMNSToken(address mnsToken_) external onlyController {\\r\\n        _mnsToken = mnsToken_;\\r\\n    }\\r\\n\\r\\n    function setMEP1002Addr(address MEP1002Addr_) external onlyController {\\r\\n        _MEP1002Addr = MEP1002Addr_;\\r\\n    }\\r\\n\\r\\n    function setExitFee(uint256 exitFee_) external onlyController {\\r\\n        _exitFee = exitFee_;\\r\\n    }\\r\\n\\r\\n    function setSlotLimit(uint256[] memory slotLimits_) external onlyController {\\r\\n        _slotLimits = slotLimits_;\\r\\n    }\\r\\n\\r\\n    function withdrawal() external onlyController {\\r\\n        payable(_msgSender()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function removeFromMEP1002SlotAdmin(uint256 _tokenId, uint256 _mep1002Id, uint256 _slotIndex) onlyController external {\\r\\n        uint256 SNCodeType = getSNCodeType(_SNCodes[_tokenId]);\\r\\n        if (SNCodeType == type(uint256).max) {\\r\\n            revert SNCodeNotAllow();\\r\\n        }\\r\\n        if (_MEP1002Slot[_mep1002Id][SNCodeType][_slotIndex] != _tokenId) {\\r\\n            revert NotCorrectSlotIndex();\\r\\n        }\\r\\n        _MEP1002Slot[_mep1002Id][SNCodeType][_slotIndex] = 0;\\r\\n        _MEP1004Status[_tokenId] = 1;\\r\\n        _whereSlot[_tokenId] = [0, 0, 0];\\r\\n        emit RemoveFromMEP1002Slot(\\r\\n            _mep1002Id,\\r\\n            _tokenId,\\r\\n            _slotIndex,\\r\\n            SNCodeType\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return _baseUri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(\\r\\n        uint256 _tokenId\\r\\n    ) public view virtual override returns (string memory) {\\r\\n        _requireMinted(_tokenId);\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n\\r\\n        return bytes(baseURI).length > 0 ? string(\\r\\n            abi.encodePacked(\\r\\n                baseURI,\\r\\n                _tokenId.toString(),\\r\\n                \\\"?name=\\\",\\r\\n                _MEP1004TokenNames[_tokenId]\\r\\n            )\\r\\n        ) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n\\r\\n    function tokenNames(uint256 _tokenId) external view returns (string memory) {\\r\\n        return _MEP1004TokenNames[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the status of the token.\\r\\n     */\\r\\n    function getStatus(uint256 _tokenId) public view returns (uint256) {\\r\\n        return _MEP1004Status[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check the status of the token, if not zero, it will revert.\\r\\n     */\\r\\n    function checkStatus(uint256 _tokenId) internal view {\\r\\n        if (_MEP1004Status[_tokenId] > 0) {\\r\\n            revert StatusNotAllow();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * @dev Returns the encrypted S/N code of the device.\\r\\n    */\\r\\n    function getSNCode(uint256 _tokenId) external view returns (string memory) {\\r\\n        return _SNCodes[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the limit number of slots that can be inserted with the MEP1002 token.\\r\\n     */\\r\\n    function slotLimits() external view returns (uint256[] memory) {\\r\\n        return _slotLimits;\\r\\n    }\\r\\n\\r\\n    function getExitFee() external view returns (uint256) {\\r\\n        return _exitFee;\\r\\n    }\\r\\n\\r\\n    function getBalance() external view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function setName(uint256 _tokenId, uint256 _nameWrapperTokenId) external {\\r\\n        if (!_isApprovedOrOwner(_msgSender(), _tokenId)) {\\r\\n            revert ERC721NotApprovedOrOwner();\\r\\n        }\\r\\n        if (IERC721(_mnsToken).ownerOf(_nameWrapperTokenId) != _msgSender())\\r\\n            revert NoNamingPermission();\\r\\n        bytes memory newName = INameWrapper(_mnsToken).names(bytes32(_nameWrapperTokenId));\\r\\n        if (bytes(newName).length == 0) {\\r\\n            return;\\r\\n        }\\r\\n        _MEP1004TokenNames[_tokenId] = string(abi.encodePacked(newName));\\r\\n        emit MEP1004TokenUpdateName(\\r\\n            _tokenId,\\r\\n            _MEP1004TokenNames[_tokenId]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function resetName(uint256 _tokenId) external {\\r\\n        if (!_isApprovedOrOwner(_msgSender(), _tokenId)) {\\r\\n            revert ERC721NotApprovedOrOwner();\\r\\n        }\\r\\n        _MEP1004TokenNames[_tokenId] = \\\"\\\";\\r\\n        emit MEP1004TokenUpdateName(\\r\\n            _tokenId,\\r\\n            _MEP1004TokenNames[_tokenId]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of slots inserted with the MEP1004 token in the specified MEP1002 token.\\r\\n     */\\r\\n    function numInsertedSlots(uint256 _mep1002Id) external view returns (uint256[] memory) {\\r\\n        uint256[] memory slotLengths = new uint256[](_slotLimits.length);\\r\\n        for (uint256 i = 0; i < _slotLimits.length; i++) {\\r\\n            for (uint256 j = 0; j < _slotLimits.length; j++) {\\r\\n                if (_MEP1002Slot[_mep1002Id][i][j] > 0) {\\r\\n                    slotLengths[i]++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return slotLengths;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Inserts the MEP1004 token to the specified slot within a MEP1002 token.\\r\\n     */\\r\\n    function insertToMEP1002Slot(uint256 _tokenId, uint256 _mep1002Id, uint256 _slotIndex) external {\\r\\n        if (!_isApprovedOrOwner(_msgSender(), _tokenId)) {\\r\\n            revert ERC721NotApprovedOrOwner();\\r\\n        }\\r\\n        if (IERC721(_MEP1002Addr).ownerOf(_mep1002Id) != _MEP1002Addr) {\\r\\n            revert ERC721InvalidTokenId();\\r\\n        }\\r\\n        uint256 SNCodeType = getSNCodeType(_SNCodes[_tokenId]);\\r\\n        if (SNCodeType == type(uint256).max) {\\r\\n            revert SNCodeNotAllow();\\r\\n        }\\r\\n        if (_slotIndex >= _slotLimits[SNCodeType]) {\\r\\n            revert ExceedSlotLimit();\\r\\n        }\\r\\n        if (_whereSlot[_tokenId][0] > 0) {\\r\\n            revert AlreadyInsertOtherSlot();\\r\\n        }\\r\\n        if (_MEP1002Slot[_mep1002Id][SNCodeType].length == 0) {\\r\\n            _MEP1002Slot[_mep1002Id][SNCodeType] = new uint256[](_slotLimits[SNCodeType]);\\r\\n        }\\r\\n        if (_MEP1002Slot[_mep1002Id][SNCodeType][_slotIndex] > 0) {\\r\\n            revert SlotAlreadyUsed();\\r\\n        }\\r\\n        checkStatus(_tokenId);\\r\\n        _MEP1002Slot[_mep1002Id][SNCodeType][_slotIndex] = _tokenId;\\r\\n        _whereSlot[_tokenId] = [_mep1002Id, SNCodeType, _slotIndex];\\r\\n        emit InsertToMEP1002Slot(\\r\\n            _mep1002Id,\\r\\n            _tokenId,\\r\\n            _slotIndex,\\r\\n            SNCodeType\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes the MEP1004 token from the specified slot within a MEP1002 token.\\r\\n     */\\r\\n    function removeFromMEP1002Slot(uint256 _tokenId, uint256 _mep1002Id, uint256 _slotIndex) external payable {\\r\\n        if (!_isApprovedOrOwner(_msgSender(), _tokenId)) {\\r\\n            revert ERC721NotApprovedOrOwner();\\r\\n        }\\r\\n        uint256 SNCodeType = getSNCodeType(_SNCodes[_tokenId]);\\r\\n        if (SNCodeType == type(uint256).max) {\\r\\n            revert SNCodeNotAllow();\\r\\n        }\\r\\n        if (_MEP1002Slot[_mep1002Id][SNCodeType][_slotIndex] != _tokenId) {\\r\\n            revert NotCorrectSlotIndex();\\r\\n        }\\r\\n        if (msg.value != _exitFee) {\\r\\n            revert InsufficientFee();\\r\\n        }\\r\\n        _MEP1002Slot[_mep1002Id][SNCodeType][_slotIndex] = 0;\\r\\n        _whereSlot[_tokenId] = [0, 0, 0];\\r\\n        emit RemoveFromMEP1002Slot(\\r\\n            _mep1002Id,\\r\\n            _tokenId,\\r\\n            _slotIndex,\\r\\n            SNCodeType\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Submit the location proofs of anything.\\r\\n     */\\r\\n    function LocationProofs(uint256 _MEP1002TokenId, uint256[] memory _MEP1004TokenIds, string memory _item) onlyController external {\\r\\n        if (IERC721(_MEP1002Addr).ownerOf(_MEP1002TokenId) != _MEP1002Addr) {\\r\\n            revert ERC721InvalidTokenId();\\r\\n        }\\r\\n        if (_MEP1004TokenIds.length < 3) {\\r\\n            revert ProofProverLessThanRequired();\\r\\n        }\\r\\n        LocationProof memory locationProof = LocationProof({\\r\\n            MEP1002TokenId: _MEP1002TokenId,\\r\\n            MEP1004TokenIds: _MEP1004TokenIds,\\r\\n            item: _item,\\r\\n            timestamp: block.timestamp\\r\\n        });\\r\\n        _locationProofs[_item].push(locationProof);\\r\\n        emit NewLocationProof(_MEP1002TokenId, _item, locationProof);\\r\\n    }\\r\\n\\r\\n    function payExitFee(uint256 _tokenId) external payable {\\r\\n        if (!_isApprovedOrOwner(_msgSender(), _tokenId)) {\\r\\n            revert ERC721NotApprovedOrOwner();\\r\\n        }\\r\\n        if (getStatus(_tokenId) != 1) {\\r\\n            revert NoDebt();\\r\\n        }\\r\\n        if (msg.value < _exitFee) {\\r\\n            revert InsufficientFee();\\r\\n        }\\r\\n        _MEP1004Status[_tokenId] = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev search the MEP1004 token in the specified slot within a MEP1002 token.\\r\\n     */\\r\\n    function whereSlot(uint256 _tokenId) external view returns (uint256[3] memory) {\\r\\n        return _whereSlot[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get the latest location proofs of anything.\\r\\n     */\\r\\n    function latestLocationProofs(string memory _item) external view returns (LocationProof memory) {\\r\\n        return _locationProofs[_item][_locationProofs[_item].length - 1];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get the recent location proofs of anything.\\r\\n     */\\r\\n    function getLocationProofs(string memory _item, uint256 _index, uint256 _batchSize) external view returns (LocationProof[] memory) {\\r\\n        // length\\r\\n        uint256 length = _batchSize;\\r\\n        if (_index >= _locationProofs[_item].length) {\\r\\n            return new LocationProof[](0);\\r\\n        }\\r\\n        if (_batchSize > _locationProofs[_item].length - _index) {\\r\\n            length = _locationProofs[_item].length - _index;\\r\\n        }\\r\\n        if (length == 0) {\\r\\n            return new LocationProof[](0);\\r\\n        }\\r\\n        LocationProof[] memory resultArr = new LocationProof[](length);\\r\\n        uint256 i = 0;\\r\\n        while (i < _batchSize && _index < _locationProofs[_item].length) {\\r\\n            resultArr[i] = _locationProofs[_item][_index];\\r\\n            i++;\\r\\n            _index++;\\r\\n        }\\r\\n        return resultArr;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getSNCodeType(string memory _str) internal pure returns (uint256) {\\r\\n        bytes memory strBytes = bytes(_str);\\r\\n        bytes memory m2xBytes = bytes(\\\"M2X\\\");\\r\\n        uint256 m2xIdx = indexOf(strBytes, m2xBytes);\\r\\n        if (m2xIdx != type(uint256).max) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        bytes memory neoBytes = bytes(\\\"NEO\\\");\\r\\n        uint256 neoIdx = indexOf(strBytes, neoBytes);\\r\\n        if (neoIdx != type(uint256).max) {\\r\\n            return 1;\\r\\n        }\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n\\r\\n    function indexOf(bytes memory _str, bytes memory _subStr) internal pure returns (uint256) {\\r\\n        require(_subStr.length <= _str.length, \\\"Cannot find a longer string in a shorter one\\\");\\r\\n        uint i;\\r\\n        uint j;\\r\\n        for (i = 0; i <= _str.length - _subStr.length; i++) {\\r\\n            bool found = true;\\r\\n            for (j = 0; j < _subStr.length; j++) {\\r\\n                if (_str[i + j] != _subStr[j]) {\\r\\n                    found = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            if (found) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return type(uint256).max;\\r\\n        // String does not contain substring\\r\\n\\r\\n    }\\r\\n\\r\\n    uint256[39] private __gap;\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xaf192ced58b5408c5fcb639c368c82e94db584272eaf12b80d3e43fc53dce020\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516159a36200004d600039600081816111c60152818161125c015281816117860152818161181c01526119d901526159a36000f3fe6080604052600436106103295760003560e01c80636895395c116101a5578063a868ec85116100ec578063da8c229e11610095578063e985e9c51161006f578063e985e9c51461090e578063ecb0116a14610957578063ee0d1e591461096d578063f2fde38b1461098257600080fd5b8063da8c229e1461089e578063e0dba60f146108ce578063e5a583a9146108ee57600080fd5b8063c87b56dd116100c6578063c87b56dd14610849578063d0def52114610869578063d4e932921461088957600080fd5b8063a868ec85146107f6578063af3aa12a14610816578063b88d4fde1461082957600080fd5b80638dcc21571161014e5780639f4480aa116101285780639f4480aa14610796578063a0fe0f51146107b6578063a22cb465146107d657600080fd5b80638dcc21571461073457806395a667671461075457806395d89b411461078157600080fd5b8063715018a61161017f578063715018a6146106ee57806389aadd39146107035780638da5cb5b1461071657600080fd5b80636895395c1461068e578063707b0379146106ae57806370a08231146106ce57600080fd5b8063310495ab116102745780634f6ccce71161021d57806355f804b3116101f757806355f804b3146105f35780635c622a0e146106135780635fdaedf4146106415780636352211e1461066e57600080fd5b80634f6ccce71461059e57806352021704146105be57806352d1902d146105de57600080fd5b806342842e0e1161024e57806342842e0e1461053e578063429f90011461055e5780634f1ef2861461058b57600080fd5b8063310495ab146104de5780633659cfe6146104fe57806337ef0a881461051e57600080fd5b806317af1318116102d6578063259f6c45116102b0578063259f6c45146104715780632828adb21461049e5780632f745c59146104be57600080fd5b806317af13181461041c57806318160ddd1461043c57806323b872dd1461045157600080fd5b8063081812fc11610307578063081812fc146103a7578063095ea7b3146103df57806312065fe0146103ff57600080fd5b806301ffc9a71461032e57806306fdde0314610363578063077f224a14610385575b600080fd5b34801561033a57600080fd5b5061034e610349366004614d76565b6109a2565b60405190151581526020015b60405180910390f35b34801561036f57600080fd5b506103786109fe565b60405161035a9190614de3565b34801561039157600080fd5b506103a56103a0366004614ee9565b610a90565b005b3480156103b357600080fd5b506103c76103c2366004614f61565b610cdb565b6040516001600160a01b03909116815260200161035a565b3480156103eb57600080fd5b506103a56103fa366004614f7a565b610d02565b34801561040b57600080fd5b50475b60405190815260200161035a565b34801561042857600080fd5b506103a5610437366004614fa6565b610e33565b34801561044857600080fd5b5060995461040e565b34801561045d57600080fd5b506103a561046c366004614fc3565b610ef3565b34801561047d57600080fd5b5061049161048c366004614f61565b610f7b565b60405161035a9190615004565b3480156104aa57600080fd5b506103a56104b9366004614f61565b610fc5565b3480156104ca57600080fd5b5061040e6104d9366004614f7a565b61107b565b3480156104ea57600080fd5b506103786104f9366004614f61565b611123565b34801561050a57600080fd5b506103a5610519366004614fa6565b6111bc565b34801561052a57600080fd5b506103a56105393660046150b5565b611359565b34801561054a57600080fd5b506103a5610559366004614fc3565b6115bc565b34801561056a57600080fd5b5061057e610579366004615122565b6115d7565b60405161035a91906151e1565b6103a56105993660046151f4565b61177c565b3480156105aa57600080fd5b5061040e6105b9366004614f61565b61190a565b3480156105ca57600080fd5b506103786105d9366004614f61565b6119ae565b3480156105ea57600080fd5b5061040e6119cc565b3480156105ff57600080fd5b506103a561060e366004615122565b611a91565b34801561061f57600080fd5b5061040e61062e366004614f61565b6000908152610164602052604090205490565b34801561064d57600080fd5b5061066161065c366004614f61565b611b23565b60405161035a9190615244565b34801561067a57600080fd5b506103c7610689366004614f61565b611c21565b34801561069a57600080fd5b506103a56106a9366004614fa6565b611c86565b3480156106ba57600080fd5b506103a56106c9366004615257565b611d46565b3480156106da57600080fd5b5061040e6106e9366004614fa6565b6121a7565b3480156106fa57600080fd5b506103a5612241565b6103a5610711366004614f61565b612255565b34801561072257600080fd5b5060c9546001600160a01b03166103c7565b34801561074057600080fd5b506103a561074f366004615257565b61232c565b34801561076057600080fd5b5061077461076f366004615283565b61252e565b60405161035a91906152d1565b34801561078d57600080fd5b506103786128c0565b3480156107a257600080fd5b506103a56107b1366004615351565b6128cf565b3480156107c257600080fd5b506103a56107d1366004614fa6565b612968565b3480156107e257600080fd5b506103a56107f1366004615386565b612a44565b34801561080257600080fd5b506103a56108113660046153c4565b612a4f565b6103a5610824366004615257565b612c81565b34801561083557600080fd5b506103a56108443660046153e6565b612e35565b34801561085557600080fd5b50610378610864366004614f61565b612ec2565b34801561087557600080fd5b506103a56108843660046151f4565b612f39565b34801561089557600080fd5b506103a56130be565b3480156108aa57600080fd5b5061034e6108b9366004614fa6565b60fb6020526000908152604090205460ff1681565b3480156108da57600080fd5b506103a56108e9366004615386565b61316f565b3480156108fa57600080fd5b506103a5610909366004614f61565b613253565b34801561091a57600080fd5b5061034e610929366004615452565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b34801561096357600080fd5b5061016a5461040e565b34801561097957600080fd5b506106616132de565b34801561098e57600080fd5b506103a561099d366004614fa6565b613336565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806109f857506109f8826133e7565b92915050565b606060658054610a0d90615480565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3990615480565b8015610a865780601f10610a5b57610100808354040283529160200191610a86565b820191906000526020600020905b815481529060010190602001808311610a6957829003601f168201915b5050505050905090565b6000610aba7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b038116610af9576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610b0e565b336001600160a01b03821614610b0e57600080fd5b600054610100900460ff1615808015610b2e5750600054600160ff909116105b80610b485750303b158015610b48575060005460ff166001145b610bbf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610bff57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610c0883612968565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610383905560408051808201909152600a815260326020820152610c5090610169906002614c2b565b506802b5e3af16b188000061016a55610c676134ca565b610c718585613547565b8015610cd457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6000610ce6826135ce565b506000908152606960205260409020546001600160a01b031690565b6000610d0d82611c21565b9050806001600160a01b0316836001600160a01b031603610d965760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610bb6565b336001600160a01b0382161480610db25750610db28133610929565b610e245760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610bb6565b610e2e8383613632565b505050565b33600090815260fb602052604090205460ff16610eb85760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b61016780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610efe335b826136b8565b610f705760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610bb6565b610e2e838383613737565b610f83614c7b565b6000828152610163602052604090819020815160608101928390529160039082845b815481526020019060010190808311610fa5575b50505050509050919050565b610fce33610ef8565b611004576040517f2728a9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051602080820183526000808352848152610165909152919091209061102c9082615521565b50807fa694c601536edf73c60319b0f41192d00bf834d6a2da065dc208ce671aa204c4610165600084815260200190815260200160002060405161107091906155e1565b60405180910390a250565b6000611086836121a7565b82106110fa5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610bb6565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b60008181526101656020526040902080546060919061114190615480565b80601f016020809104026020016040519081016040528092919081815260200182805461116d90615480565b8015610fb95780601f1061118f57610100808354040283529160200191610fb9565b820191906000526020600020905b81548152906001019060200180831161119d5750939695505050505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361125a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610bb6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112b57f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146113315760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610bb6565b61133a81613985565b604080516000808252602082019092526113569183919061398d565b50565b33600090815260fb602052604090205460ff166113de5760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b610168546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b03909116908190636352211e90602401602060405180830381865afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611467919061566c565b6001600160a01b0316146114a7576040517f89ba7e1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003825110156114e3576040517f60dcf25500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160808101825284815260208101849052808201839052426060820152905161016090611514908490615689565b9081526040516020918190038201902080546001808201835560009283529183902084516004909202019081558383015180518594929361155a93908501920190614c99565b506040820151600282019061156f9082615521565b50606082015181600301555050837f2e98898a19e958501663f92bcca1fbcd2d69778c64868d0e845c09cf4d0b20ca83836040516115ae9291906156a5565b60405180910390a250505050565b610e2e83838360405180602001604052806000815250612e35565b6116026040518060800160405280600081526020016060815260200160608152602001600081525090565b610160826040516116139190615689565b90815260200160405180910390206001610160846040516116349190615689565b9081526040519081900360200190205461164e91906156f9565b8154811061165e5761165e61570c565b906000526020600020906004020160405180608001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156116d057602002820191906000526020600020905b8154815260200190600101908083116116bc575b505050505081526020016002820180546116e990615480565b80601f016020809104026020016040519081016040528092919081815260200182805461171590615480565b80156117625780601f1061173757610100808354040283529160200191611762565b820191906000526020600020905b81548152906001019060200180831161174557829003601f168201915b505050505081526020016003820154815250509050919050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361181a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610bb6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118757f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146118f15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610bb6565b6118fa82613985565b6119068282600161398d565b5050565b600061191560995490565b82106119895760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610bb6565b6099828154811061199c5761199c61570c565b90600052602060002001549050919050565b60008181526101616020526040902080546060919061114190615480565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a6c5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610bb6565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b33600090815260fb602052604090205460ff16611b165760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b6101666119068282615521565b6101695460609060009067ffffffffffffffff811115611b4557611b45614df6565b604051908082528060200260200182016040528015611b6e578160200160208202803683370190505b50905060005b61016954811015611c1a5760005b61016954811015611c07576000858152610162602090815260408083208584529091528120805483908110611bb957611bb961570c565b90600052602060002001541115611bf557828281518110611bdc57611bdc61570c565b602002602001018051809190611bf19061573b565b9052505b80611bff8161573b565b915050611b82565b5080611c128161573b565b915050611b74565b5092915050565b6000818152606760205260408120546001600160a01b0316806109f85760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610bb6565b33600090815260fb602052604090205460ff16611d0b5760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b61016880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b611d51335b846136b8565b611d87576040517f2728a9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610168546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03909116908190636352211e90602401602060405180830381865afa158015611dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e10919061566c565b6001600160a01b031614611e50576040517f89ba7e1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152610161602052604081208054611ef29190611e6f90615480565b80601f0160208091040260200160405190810160405280929190818152602001828054611e9b90615480565b8015611ee85780601f10611ebd57610100808354040283529160200191611ee8565b820191906000526020600020905b815481529060010190602001808311611ecb57829003601f168201915b5050505050613b2d565b90506000198103611f2f576040517f9a67e0a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101698181548110611f4357611f4361570c565b90600052602060002001548210611f86576040517fcd5141ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152610163602052604090205415611fcd576040517fc6198ccc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815261016260209081526040808320848452909152812054900361207d5761016981815481106120025761200261570c565b906000526020600020015467ffffffffffffffff81111561202557612025614df6565b60405190808252806020026020018201604052801561204e578160200160208202803683370190505b506000848152610162602090815260408083208584528252909120825161207b9391929190910190614c99565b505b60008381526101626020908152604080832084845290915281208054849081106120a9576120a961570c565b906000526020600020015411156120ec576040517fb56d9ea300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6120f584613bed565b60008381526101626020908152604080832084845290915290208054859190849081106121245761212461570c565b6000918252602080832090910192909255604080516060810182528681528084018590528082018690528783526101639093529020612164916003614cd4565b508184847fa9ed834f1ee1816d4ead1b5aa79103b66c8037b7dbe5d0fd1c94a386115724b78460405161219991815260200190565b60405180910390a450505050565b60006001600160a01b0382166122255760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610bb6565b506001600160a01b031660009081526068602052604090205490565b612249613c34565b6122536000613c8e565b565b61225e33610ef8565b612294576040517f2728a9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815261016460205260409020546001146122dd576040517f11a3fbc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61016a5434101561231a576040517f025dbdd400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60009081526101646020526040812055565b33600090815260fb602052604090205460ff166123b15760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b60008381526101616020526040812080546123d09190611e6f90615480565b9050600019810361240d576040517f9a67e0a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815261016260209081526040808320848452909152902080548591908490811061243c5761243c61570c565b90600052602060002001541461247e576040517f188a12d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526101626020908152604080832084845290915281208054849081106124aa576124aa61570c565b60009182526020808320909101929092558581526101648252604080822060019055805160608101825282815280840183905280820183905287835261016390935290206124f9916003614d01565b508184847f16ea7ce6a4d526a8710d917a4773ee2e6de1e9dfaa405acb8b97da84185eb1b58460405161219991815260200190565b60606000829050610160856040516125469190615689565b9081526040519081900360200190205484106125b95760408051600080825260208201909252906125b0565b61259d6040518060800160405280600081526020016060815260200160608152602001600081525090565b8152602001906001900390816125725790505b509150506128b9565b83610160866040516125cb9190615689565b908152604051908190036020019020546125e591906156f9565b83111561261b5783610160866040516125fe9190615689565b9081526040519081900360200190205461261891906156f9565b90505b8060000361267f5760408051600080825260208201909252906125b0565b6126646040518060800160405280600081526020016060815260200160608152602001600081525090565b815260200190600190039081612639579050509150506128b9565b60008167ffffffffffffffff81111561269a5761269a614df6565b6040519080825280602002602001820160405280156126f657816020015b6126e36040518060800160405280600081526020016060815260200160608152602001600081525090565b8152602001906001900390816126b85790505b50905060005b848110801561272a5750610160876040516127179190615689565b9081526040519081900360200190205486105b156128b457610160876040516127409190615689565b9081526020016040518091039020868154811061275f5761275f61570c565b906000526020600020906004020160405180608001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156127d157602002820191906000526020600020905b8154815260200190600101908083116127bd575b505050505081526020016002820180546127ea90615480565b80601f016020809104026020016040519081016040528092919081815260200182805461281690615480565b80156128635780601f1061283857610100808354040283529160200191612863565b820191906000526020600020905b81548152906001019060200180831161284657829003601f168201915b505050505081526020016003820154815250508282815181106128885761288861570c565b6020026020010181905250808061289e9061573b565b91505085806128ac9061573b565b9650506126fc565b509150505b9392505050565b606060668054610a0d90615480565b33600090815260fb602052604090205460ff166129545760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b805161190690610169906020840190614c99565b600054610100900460ff166129e55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bb6565b6129ed613cf8565b6001600160a01b038116600081815260fb6020908152604091829020805460ff1916600190811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf879101611070565b611906338383613d7d565b612a5a335b836136b8565b612a90576040517f2728a9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33610167546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015612af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1c919061566c565b6001600160a01b031614612b5c576040517f507b884600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610167546040517f20c38e2b000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b0316906320c38e2b90602401600060405180830381865afa158015612bc0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612be89190810190615755565b90508051600003612bf857505050565b80604051602001612c099190615689565b60408051601f1981840301815291815260008581526101656020522090612c309082615521565b50827fa694c601536edf73c60319b0f41192d00bf834d6a2da065dc208ce671aa204c46101656000868152602001908152602001600020604051612c7491906155e1565b60405180910390a2505050565b612c8a33611d4b565b612cc0576040517f2728a9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152610161602052604081208054612cdf9190611e6f90615480565b90506000198103612d1c576040517f9a67e0a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152610162602090815260408083208484529091529020805485919084908110612d4b57612d4b61570c565b906000526020600020015414612d8d576040517f188a12d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61016a543414612dc9576040517f025dbdd400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152610162602090815260408083208484529091528120805484908110612df557612df561570c565b60009182526020808320909101929092556040805160608101825282815280840183905280820183905287835261016390935290206124f9916003614d01565b612e3e33612a54565b612eb05760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610bb6565b612ebc84848484613e4b565b50505050565b6060612ecd826135ce565b6000612ed7613ed4565b90506000815111612ef757604051806020016040528060008152506128b9565b80612f0184613ee4565b600085815261016560209081526040918290209151612f2394939291016157c3565b6040516020818303038152906040529392505050565b33600090815260fb602052604090205460ff16612fbe5760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b8051600003612ff9576040517fc5a8d37100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516020820120613021816000908152606760205260409020546001600160a01b0316151590565b15613058576040517fc5a8d37100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60001961306483613b2d565b0361309b576040517f9a67e0a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6130a58382613f84565b600081815261016160205260409020612ebc8382615521565b33600090815260fb602052604090205460ff166131435760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b60405133904780156108fc02916000818181858888f19350505050158015611356573d6000803e3d6000fd5b33600090815260fb602052604090205460ff166131f45760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b6001600160a01b038216600081815260fb6020908152604091829020805460ff191685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf87910160405180910390a25050565b33600090815260fb602052604090205460ff166132d85760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b61016a55565b6060610169805480602002602001604051908101604052809291908181526020018280548015610a8657602002820191906000526020600020905b815481526020019060010190808311613319575050505050905090565b61333e613c34565b6001600160a01b0381166133ba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610bb6565b6133c381613c8e565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061347a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806109f857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146109f8565b600054610100900460ff166122535760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bb6565b600054610100900460ff166135c45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bb6565b6119068282613f9e565b6000818152606760205260409020546001600160a01b03166113565760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610bb6565b600081815260696020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416908117909155819061367f82611c21565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806136c483611c21565b9050806001600160a01b0316846001600160a01b0316148061370b57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b8061372f5750836001600160a01b031661372484610cdb565b6001600160a01b0316145b949350505050565b826001600160a01b031661374a82611c21565b6001600160a01b0316146137c65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610bb6565b6001600160a01b0382166138415760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610bb6565b61384e8383836001614034565b826001600160a01b031661386182611c21565b6001600160a01b0316146138dd5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610bb6565b600081815260696020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611356613c34565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156139c057610e2e83614169565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613a1a575060408051601f3d908101601f19168201909252613a1791810190615892565b60015b613a8c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610bb6565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114613b215760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610bb6565b50610e2e83838361423f565b60408051808201909152600381527f4d325800000000000000000000000000000000000000000000000000000000006020820152600090829082613b718383614264565b90506000198114613b8757506000949350505050565b60408051808201909152600381527f4e454f000000000000000000000000000000000000000000000000000000000060208201526000613bc78583614264565b90506000198114613bdf575060019695505050505050565b506000199695505050505050565b6000818152610164602052604090205415611356576040517fce006bf600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c9546001600160a01b031633146122535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bb6565b60c980546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16613d755760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bb6565b6122536143cf565b816001600160a01b0316836001600160a01b031603613dde5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610bb6565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613e56848484613737565b613e6284848484614455565b612ebc5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610bb6565b60606101668054610a0d90615480565b60606000613ef1836145f6565b600101905060008167ffffffffffffffff811115613f1157613f11614df6565b6040519080825280601f01601f191660200182016040528015613f3b576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084613f4557509392505050565b6119068282604051806020016040528060008152506146d8565b600054610100900460ff1661401b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bb6565b60656140278382615521565b506066610e2e8282615521565b60018111156140ab5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f7274656400000000000000000000006064820152608401610bb6565b816001600160a01b0385166141075761410281609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61412a565b836001600160a01b0316856001600160a01b03161461412a5761412a8582614761565b6001600160a01b03841661414657614141816147fe565b610cd4565b846001600160a01b0316846001600160a01b031614610cd457610cd484826148ad565b6001600160a01b0381163b6141e65760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610bb6565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b614248836148f1565b6000825111806142555750805b15610e2e57612ebc8383614931565b60008251825111156142de5760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f742066696e642061206c6f6e67657220737472696e6720696e206160448201527f2073686f72746572206f6e6500000000000000000000000000000000000000006064820152608401610bb6565b6000805b835185516142f091906156f9565b82116143c35750600060015b845182101561439f578482815181106143175761431761570c565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168661434984866158ab565b815181106143595761435961570c565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161461438d5750600061439f565b816143978161573b565b9250506142fc565b80156143b0578293505050506109f8565b50816143bb8161573b565b9250506142e2565b50600019949350505050565b600054610100900460ff1661444c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bb6565b61225333613c8e565b60006001600160a01b0384163b156145eb576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906144b29033908990889088906004016158be565b6020604051808303816000875af19250505080156144ed575060408051601f3d908101601f191682019092526144ea918101906158fa565b60015b6145a0573d80801561451b576040519150601f19603f3d011682016040523d82523d6000602084013e614520565b606091505b5080516000036145985760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610bb6565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061372f565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061463f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061466b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061468957662386f26fc10000830492506010015b6305f5e10083106146a1576305f5e100830492506008015b61271083106146b557612710830492506004015b606483106146c7576064830492506002015b600a83106109f85760010192915050565b6146e28383614a3c565b6146ef6000848484614455565b610e2e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610bb6565b6000600161476e846121a7565b61477891906156f9565b6000838152609860205260409020549091508082146147cb576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090614810906001906156f9565b6000838152609a6020526040812054609980549394509092849081106148385761483861570c565b9060005260206000200154905080609983815481106148595761485961570c565b6000918252602080832090910192909255828152609a9091526040808220849055858252812055609980548061489157614891615917565b6001900381819060005260206000200160009055905550505050565b60006148b8836121a7565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6148fa81614169565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6149b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610bb6565b600080846001600160a01b0316846040516149cb9190615689565b600060405180830381855af49150503d8060008114614a06576040519150601f19603f3d011682016040523d82523d6000602084013e614a0b565b606091505b5091509150614a33828260405180606001604052806027815260200161594760279139614bed565b95945050505050565b6001600160a01b038216614a925760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610bb6565b6000818152606760205260409020546001600160a01b031615614af75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bb6565b614b05600083836001614034565b6000818152606760205260409020546001600160a01b031615614b6a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bb6565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60608315614bfc5750816128b9565b6128b98383815115614c115781518083602001fd5b8060405162461bcd60e51b8152600401610bb69190614de3565b828054828255906000526020600020908101928215614c6b579160200282015b82811115614c6b578251829060ff16905591602001919060010190614c4b565b50614c77929150614d33565b5090565b60405180606001604052806003906020820280368337509192915050565b828054828255906000526020600020908101928215614c6b579160200282015b82811115614c6b578251825591602001919060010190614cb9565b8260038101928215614c6b5791602002820182811115614c6b578251825591602001919060010190614cb9565b8260038101928215614c6b5791602002820182811115614c6b578251829060ff16905591602001919060010190614c4b565b5b80821115614c775760008155600101614d34565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461135657600080fd5b600060208284031215614d8857600080fd5b81356128b981614d48565b60005b83811015614dae578181015183820152602001614d96565b50506000910152565b60008151808452614dcf816020860160208601614d93565b601f01601f19169290920160200192915050565b6020815260006128b96020830184614db7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614e4e57614e4e614df6565b604052919050565b600067ffffffffffffffff821115614e7057614e70614df6565b50601f01601f191660200190565b600082601f830112614e8f57600080fd5b8135614ea2614e9d82614e56565b614e25565b818152846020838601011115614eb757600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b038116811461135657600080fd5b600080600060608486031215614efe57600080fd5b833567ffffffffffffffff80821115614f1657600080fd5b614f2287838801614e7e565b94506020860135915080821115614f3857600080fd5b50614f4586828701614e7e565b9250506040840135614f5681614ed4565b809150509250925092565b600060208284031215614f7357600080fd5b5035919050565b60008060408385031215614f8d57600080fd5b8235614f9881614ed4565b946020939093013593505050565b600060208284031215614fb857600080fd5b81356128b981614ed4565b600080600060608486031215614fd857600080fd5b8335614fe381614ed4565b92506020840135614ff381614ed4565b929592945050506040919091013590565b60608101818360005b600381101561502c57815183526020928301929091019060010161500d565b50505092915050565b600082601f83011261504657600080fd5b8135602067ffffffffffffffff82111561506257615062614df6565b8160051b615071828201614e25565b928352848101820192828101908785111561508b57600080fd5b83870192505b848310156150aa57823582529183019190830190615091565b979650505050505050565b6000806000606084860312156150ca57600080fd5b83359250602084013567ffffffffffffffff808211156150e957600080fd5b6150f587838801615035565b9350604086013591508082111561510b57600080fd5b5061511886828701614e7e565b9150509250925092565b60006020828403121561513457600080fd5b813567ffffffffffffffff81111561514b57600080fd5b61372f84828501614e7e565b600081518084526020808501945080840160005b838110156151875781518752958201959082019060010161516b565b509495945050505050565b8051825260006020820151608060208501526151b16080850182615157565b9050604083015184820360408601526151ca8282614db7565b915050606083015160608501528091505092915050565b6020815260006128b96020830184615192565b6000806040838503121561520757600080fd5b823561521281614ed4565b9150602083013567ffffffffffffffff81111561522e57600080fd5b61523a85828601614e7e565b9150509250929050565b6020815260006128b96020830184615157565b60008060006060848603121561526c57600080fd5b505081359360208301359350604090920135919050565b60008060006060848603121561529857600080fd5b833567ffffffffffffffff8111156152af57600080fd5b6152bb86828701614e7e565b9660208601359650604090950135949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015615344577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452615332858351615192565b945092850192908501906001016152f8565b5092979650505050505050565b60006020828403121561536357600080fd5b813567ffffffffffffffff81111561537a57600080fd5b61372f84828501615035565b6000806040838503121561539957600080fd5b82356153a481614ed4565b9150602083013580151581146153b957600080fd5b809150509250929050565b600080604083850312156153d757600080fd5b50508035926020909101359150565b600080600080608085870312156153fc57600080fd5b843561540781614ed4565b9350602085013561541781614ed4565b925060408501359150606085013567ffffffffffffffff81111561543a57600080fd5b61544687828801614e7e565b91505092959194509250565b6000806040838503121561546557600080fd5b823561547081614ed4565b915060208301356153b981614ed4565b600181811c9082168061549457607f821691505b6020821081036154cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115610e2e57600081815260208120601f850160051c810160208610156154fa5750805b601f850160051c820191505b8181101561551957828155600101615506565b505050505050565b815167ffffffffffffffff81111561553b5761553b614df6565b61554f816155498454615480565b846154d3565b602080601f831160018114615584576000841561556c5750858301515b600019600386901b1c1916600185901b178555615519565b600085815260208120601f198616915b828110156155b357888601518255948401946001909101908401615594565b50858210156155d15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352600084546155f581615480565b8084870152604060018084166000811461561657600181146156305761565e565b60ff198516838a01528284151560051b8a0101955061565e565b896000528660002060005b858110156156565781548b820186015290830190880161563b565b8a0184019650505b509398975050505050505050565b60006020828403121561567e57600080fd5b81516128b981614ed4565b6000825161569b818460208701614d93565b9190910192915050565b6040815260006156b86040830185614db7565b8281036020840152614a338185615192565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156109f8576109f86156ca565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000600019820361574e5761574e6156ca565b5060010190565b60006020828403121561576757600080fd5b815167ffffffffffffffff81111561577e57600080fd5b8201601f8101841361578f57600080fd5b805161579d614e9d82614e56565b8181528560208385010111156157b257600080fd5b614a33826020830160208601614d93565b6000845160206157d68285838a01614d93565b8551918401916157e98184848a01614d93565b7f3f6e616d653d00000000000000000000000000000000000000000000000000009201918252845460069060009061582081615480565b60018281168015615838576001811461585157615881565b60ff198416868901528583151584028901019450615881565b8a6000528660002060005b848110156158775781548a820189015290830190880161585c565b5050858389010194505b50929b9a5050505050505050505050565b6000602082840312156158a457600080fd5b5051919050565b808201808211156109f8576109f86156ca565b60006001600160a01b038087168352808616602084015250836040830152608060608301526158f06080830184614db7565b9695505050505050565b60006020828403121561590c57600080fd5b81516128b981614d48565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a0ffc09e042b154ef4346017a770f233b3b530044de5d4145627cc4bf39f34ae64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106103295760003560e01c80636895395c116101a5578063a868ec85116100ec578063da8c229e11610095578063e985e9c51161006f578063e985e9c51461090e578063ecb0116a14610957578063ee0d1e591461096d578063f2fde38b1461098257600080fd5b8063da8c229e1461089e578063e0dba60f146108ce578063e5a583a9146108ee57600080fd5b8063c87b56dd116100c6578063c87b56dd14610849578063d0def52114610869578063d4e932921461088957600080fd5b8063a868ec85146107f6578063af3aa12a14610816578063b88d4fde1461082957600080fd5b80638dcc21571161014e5780639f4480aa116101285780639f4480aa14610796578063a0fe0f51146107b6578063a22cb465146107d657600080fd5b80638dcc21571461073457806395a667671461075457806395d89b411461078157600080fd5b8063715018a61161017f578063715018a6146106ee57806389aadd39146107035780638da5cb5b1461071657600080fd5b80636895395c1461068e578063707b0379146106ae57806370a08231146106ce57600080fd5b8063310495ab116102745780634f6ccce71161021d57806355f804b3116101f757806355f804b3146105f35780635c622a0e146106135780635fdaedf4146106415780636352211e1461066e57600080fd5b80634f6ccce71461059e57806352021704146105be57806352d1902d146105de57600080fd5b806342842e0e1161024e57806342842e0e1461053e578063429f90011461055e5780634f1ef2861461058b57600080fd5b8063310495ab146104de5780633659cfe6146104fe57806337ef0a881461051e57600080fd5b806317af1318116102d6578063259f6c45116102b0578063259f6c45146104715780632828adb21461049e5780632f745c59146104be57600080fd5b806317af13181461041c57806318160ddd1461043c57806323b872dd1461045157600080fd5b8063081812fc11610307578063081812fc146103a7578063095ea7b3146103df57806312065fe0146103ff57600080fd5b806301ffc9a71461032e57806306fdde0314610363578063077f224a14610385575b600080fd5b34801561033a57600080fd5b5061034e610349366004614d76565b6109a2565b60405190151581526020015b60405180910390f35b34801561036f57600080fd5b506103786109fe565b60405161035a9190614de3565b34801561039157600080fd5b506103a56103a0366004614ee9565b610a90565b005b3480156103b357600080fd5b506103c76103c2366004614f61565b610cdb565b6040516001600160a01b03909116815260200161035a565b3480156103eb57600080fd5b506103a56103fa366004614f7a565b610d02565b34801561040b57600080fd5b50475b60405190815260200161035a565b34801561042857600080fd5b506103a5610437366004614fa6565b610e33565b34801561044857600080fd5b5060995461040e565b34801561045d57600080fd5b506103a561046c366004614fc3565b610ef3565b34801561047d57600080fd5b5061049161048c366004614f61565b610f7b565b60405161035a9190615004565b3480156104aa57600080fd5b506103a56104b9366004614f61565b610fc5565b3480156104ca57600080fd5b5061040e6104d9366004614f7a565b61107b565b3480156104ea57600080fd5b506103786104f9366004614f61565b611123565b34801561050a57600080fd5b506103a5610519366004614fa6565b6111bc565b34801561052a57600080fd5b506103a56105393660046150b5565b611359565b34801561054a57600080fd5b506103a5610559366004614fc3565b6115bc565b34801561056a57600080fd5b5061057e610579366004615122565b6115d7565b60405161035a91906151e1565b6103a56105993660046151f4565b61177c565b3480156105aa57600080fd5b5061040e6105b9366004614f61565b61190a565b3480156105ca57600080fd5b506103786105d9366004614f61565b6119ae565b3480156105ea57600080fd5b5061040e6119cc565b3480156105ff57600080fd5b506103a561060e366004615122565b611a91565b34801561061f57600080fd5b5061040e61062e366004614f61565b6000908152610164602052604090205490565b34801561064d57600080fd5b5061066161065c366004614f61565b611b23565b60405161035a9190615244565b34801561067a57600080fd5b506103c7610689366004614f61565b611c21565b34801561069a57600080fd5b506103a56106a9366004614fa6565b611c86565b3480156106ba57600080fd5b506103a56106c9366004615257565b611d46565b3480156106da57600080fd5b5061040e6106e9366004614fa6565b6121a7565b3480156106fa57600080fd5b506103a5612241565b6103a5610711366004614f61565b612255565b34801561072257600080fd5b5060c9546001600160a01b03166103c7565b34801561074057600080fd5b506103a561074f366004615257565b61232c565b34801561076057600080fd5b5061077461076f366004615283565b61252e565b60405161035a91906152d1565b34801561078d57600080fd5b506103786128c0565b3480156107a257600080fd5b506103a56107b1366004615351565b6128cf565b3480156107c257600080fd5b506103a56107d1366004614fa6565b612968565b3480156107e257600080fd5b506103a56107f1366004615386565b612a44565b34801561080257600080fd5b506103a56108113660046153c4565b612a4f565b6103a5610824366004615257565b612c81565b34801561083557600080fd5b506103a56108443660046153e6565b612e35565b34801561085557600080fd5b50610378610864366004614f61565b612ec2565b34801561087557600080fd5b506103a56108843660046151f4565b612f39565b34801561089557600080fd5b506103a56130be565b3480156108aa57600080fd5b5061034e6108b9366004614fa6565b60fb6020526000908152604090205460ff1681565b3480156108da57600080fd5b506103a56108e9366004615386565b61316f565b3480156108fa57600080fd5b506103a5610909366004614f61565b613253565b34801561091a57600080fd5b5061034e610929366004615452565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b34801561096357600080fd5b5061016a5461040e565b34801561097957600080fd5b506106616132de565b34801561098e57600080fd5b506103a561099d366004614fa6565b613336565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806109f857506109f8826133e7565b92915050565b606060658054610a0d90615480565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3990615480565b8015610a865780601f10610a5b57610100808354040283529160200191610a86565b820191906000526020600020905b815481529060010190602001808311610a6957829003601f168201915b5050505050905090565b6000610aba7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b038116610af9576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610b0e565b336001600160a01b03821614610b0e57600080fd5b600054610100900460ff1615808015610b2e5750600054600160ff909116105b80610b485750303b158015610b48575060005460ff166001145b610bbf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610bff57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610c0883612968565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610383905560408051808201909152600a815260326020820152610c5090610169906002614c2b565b506802b5e3af16b188000061016a55610c676134ca565b610c718585613547565b8015610cd457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6000610ce6826135ce565b506000908152606960205260409020546001600160a01b031690565b6000610d0d82611c21565b9050806001600160a01b0316836001600160a01b031603610d965760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610bb6565b336001600160a01b0382161480610db25750610db28133610929565b610e245760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610bb6565b610e2e8383613632565b505050565b33600090815260fb602052604090205460ff16610eb85760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b61016780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610efe335b826136b8565b610f705760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610bb6565b610e2e838383613737565b610f83614c7b565b6000828152610163602052604090819020815160608101928390529160039082845b815481526020019060010190808311610fa5575b50505050509050919050565b610fce33610ef8565b611004576040517f2728a9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051602080820183526000808352848152610165909152919091209061102c9082615521565b50807fa694c601536edf73c60319b0f41192d00bf834d6a2da065dc208ce671aa204c4610165600084815260200190815260200160002060405161107091906155e1565b60405180910390a250565b6000611086836121a7565b82106110fa5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610bb6565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b60008181526101656020526040902080546060919061114190615480565b80601f016020809104026020016040519081016040528092919081815260200182805461116d90615480565b8015610fb95780601f1061118f57610100808354040283529160200191610fb9565b820191906000526020600020905b81548152906001019060200180831161119d5750939695505050505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361125a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610bb6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112b57f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146113315760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610bb6565b61133a81613985565b604080516000808252602082019092526113569183919061398d565b50565b33600090815260fb602052604090205460ff166113de5760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b610168546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b03909116908190636352211e90602401602060405180830381865afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611467919061566c565b6001600160a01b0316146114a7576040517f89ba7e1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003825110156114e3576040517f60dcf25500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160808101825284815260208101849052808201839052426060820152905161016090611514908490615689565b9081526040516020918190038201902080546001808201835560009283529183902084516004909202019081558383015180518594929361155a93908501920190614c99565b506040820151600282019061156f9082615521565b50606082015181600301555050837f2e98898a19e958501663f92bcca1fbcd2d69778c64868d0e845c09cf4d0b20ca83836040516115ae9291906156a5565b60405180910390a250505050565b610e2e83838360405180602001604052806000815250612e35565b6116026040518060800160405280600081526020016060815260200160608152602001600081525090565b610160826040516116139190615689565b90815260200160405180910390206001610160846040516116349190615689565b9081526040519081900360200190205461164e91906156f9565b8154811061165e5761165e61570c565b906000526020600020906004020160405180608001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156116d057602002820191906000526020600020905b8154815260200190600101908083116116bc575b505050505081526020016002820180546116e990615480565b80601f016020809104026020016040519081016040528092919081815260200182805461171590615480565b80156117625780601f1061173757610100808354040283529160200191611762565b820191906000526020600020905b81548152906001019060200180831161174557829003601f168201915b505050505081526020016003820154815250509050919050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361181a5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610bb6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118757f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146118f15760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610bb6565b6118fa82613985565b6119068282600161398d565b5050565b600061191560995490565b82106119895760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610bb6565b6099828154811061199c5761199c61570c565b90600052602060002001549050919050565b60008181526101616020526040902080546060919061114190615480565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a6c5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610bb6565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b33600090815260fb602052604090205460ff16611b165760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b6101666119068282615521565b6101695460609060009067ffffffffffffffff811115611b4557611b45614df6565b604051908082528060200260200182016040528015611b6e578160200160208202803683370190505b50905060005b61016954811015611c1a5760005b61016954811015611c07576000858152610162602090815260408083208584529091528120805483908110611bb957611bb961570c565b90600052602060002001541115611bf557828281518110611bdc57611bdc61570c565b602002602001018051809190611bf19061573b565b9052505b80611bff8161573b565b915050611b82565b5080611c128161573b565b915050611b74565b5092915050565b6000818152606760205260408120546001600160a01b0316806109f85760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610bb6565b33600090815260fb602052604090205460ff16611d0b5760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b61016880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b611d51335b846136b8565b611d87576040517f2728a9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610168546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03909116908190636352211e90602401602060405180830381865afa158015611dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e10919061566c565b6001600160a01b031614611e50576040517f89ba7e1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152610161602052604081208054611ef29190611e6f90615480565b80601f0160208091040260200160405190810160405280929190818152602001828054611e9b90615480565b8015611ee85780601f10611ebd57610100808354040283529160200191611ee8565b820191906000526020600020905b815481529060010190602001808311611ecb57829003601f168201915b5050505050613b2d565b90506000198103611f2f576040517f9a67e0a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101698181548110611f4357611f4361570c565b90600052602060002001548210611f86576040517fcd5141ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152610163602052604090205415611fcd576040517fc6198ccc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815261016260209081526040808320848452909152812054900361207d5761016981815481106120025761200261570c565b906000526020600020015467ffffffffffffffff81111561202557612025614df6565b60405190808252806020026020018201604052801561204e578160200160208202803683370190505b506000848152610162602090815260408083208584528252909120825161207b9391929190910190614c99565b505b60008381526101626020908152604080832084845290915281208054849081106120a9576120a961570c565b906000526020600020015411156120ec576040517fb56d9ea300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6120f584613bed565b60008381526101626020908152604080832084845290915290208054859190849081106121245761212461570c565b6000918252602080832090910192909255604080516060810182528681528084018590528082018690528783526101639093529020612164916003614cd4565b508184847fa9ed834f1ee1816d4ead1b5aa79103b66c8037b7dbe5d0fd1c94a386115724b78460405161219991815260200190565b60405180910390a450505050565b60006001600160a01b0382166122255760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610bb6565b506001600160a01b031660009081526068602052604090205490565b612249613c34565b6122536000613c8e565b565b61225e33610ef8565b612294576040517f2728a9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815261016460205260409020546001146122dd576040517f11a3fbc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61016a5434101561231a576040517f025dbdd400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60009081526101646020526040812055565b33600090815260fb602052604090205460ff166123b15760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b60008381526101616020526040812080546123d09190611e6f90615480565b9050600019810361240d576040517f9a67e0a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815261016260209081526040808320848452909152902080548591908490811061243c5761243c61570c565b90600052602060002001541461247e576040517f188a12d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526101626020908152604080832084845290915281208054849081106124aa576124aa61570c565b60009182526020808320909101929092558581526101648252604080822060019055805160608101825282815280840183905280820183905287835261016390935290206124f9916003614d01565b508184847f16ea7ce6a4d526a8710d917a4773ee2e6de1e9dfaa405acb8b97da84185eb1b58460405161219991815260200190565b60606000829050610160856040516125469190615689565b9081526040519081900360200190205484106125b95760408051600080825260208201909252906125b0565b61259d6040518060800160405280600081526020016060815260200160608152602001600081525090565b8152602001906001900390816125725790505b509150506128b9565b83610160866040516125cb9190615689565b908152604051908190036020019020546125e591906156f9565b83111561261b5783610160866040516125fe9190615689565b9081526040519081900360200190205461261891906156f9565b90505b8060000361267f5760408051600080825260208201909252906125b0565b6126646040518060800160405280600081526020016060815260200160608152602001600081525090565b815260200190600190039081612639579050509150506128b9565b60008167ffffffffffffffff81111561269a5761269a614df6565b6040519080825280602002602001820160405280156126f657816020015b6126e36040518060800160405280600081526020016060815260200160608152602001600081525090565b8152602001906001900390816126b85790505b50905060005b848110801561272a5750610160876040516127179190615689565b9081526040519081900360200190205486105b156128b457610160876040516127409190615689565b9081526020016040518091039020868154811061275f5761275f61570c565b906000526020600020906004020160405180608001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156127d157602002820191906000526020600020905b8154815260200190600101908083116127bd575b505050505081526020016002820180546127ea90615480565b80601f016020809104026020016040519081016040528092919081815260200182805461281690615480565b80156128635780601f1061283857610100808354040283529160200191612863565b820191906000526020600020905b81548152906001019060200180831161284657829003601f168201915b505050505081526020016003820154815250508282815181106128885761288861570c565b6020026020010181905250808061289e9061573b565b91505085806128ac9061573b565b9650506126fc565b509150505b9392505050565b606060668054610a0d90615480565b33600090815260fb602052604090205460ff166129545760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b805161190690610169906020840190614c99565b600054610100900460ff166129e55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bb6565b6129ed613cf8565b6001600160a01b038116600081815260fb6020908152604091829020805460ff1916600190811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf879101611070565b611906338383613d7d565b612a5a335b836136b8565b612a90576040517f2728a9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33610167546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015612af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1c919061566c565b6001600160a01b031614612b5c576040517f507b884600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610167546040517f20c38e2b000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b0316906320c38e2b90602401600060405180830381865afa158015612bc0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612be89190810190615755565b90508051600003612bf857505050565b80604051602001612c099190615689565b60408051601f1981840301815291815260008581526101656020522090612c309082615521565b50827fa694c601536edf73c60319b0f41192d00bf834d6a2da065dc208ce671aa204c46101656000868152602001908152602001600020604051612c7491906155e1565b60405180910390a2505050565b612c8a33611d4b565b612cc0576040517f2728a9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152610161602052604081208054612cdf9190611e6f90615480565b90506000198103612d1c576040517f9a67e0a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152610162602090815260408083208484529091529020805485919084908110612d4b57612d4b61570c565b906000526020600020015414612d8d576040517f188a12d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61016a543414612dc9576040517f025dbdd400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152610162602090815260408083208484529091528120805484908110612df557612df561570c565b60009182526020808320909101929092556040805160608101825282815280840183905280820183905287835261016390935290206124f9916003614d01565b612e3e33612a54565b612eb05760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610bb6565b612ebc84848484613e4b565b50505050565b6060612ecd826135ce565b6000612ed7613ed4565b90506000815111612ef757604051806020016040528060008152506128b9565b80612f0184613ee4565b600085815261016560209081526040918290209151612f2394939291016157c3565b6040516020818303038152906040529392505050565b33600090815260fb602052604090205460ff16612fbe5760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b8051600003612ff9576040517fc5a8d37100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516020820120613021816000908152606760205260409020546001600160a01b0316151590565b15613058576040517fc5a8d37100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60001961306483613b2d565b0361309b576040517f9a67e0a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6130a58382613f84565b600081815261016160205260409020612ebc8382615521565b33600090815260fb602052604090205460ff166131435760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b60405133904780156108fc02916000818181858888f19350505050158015611356573d6000803e3d6000fd5b33600090815260fb602052604090205460ff166131f45760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b6001600160a01b038216600081815260fb6020908152604091829020805460ff191685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf87910160405180910390a25050565b33600090815260fb602052604090205460ff166132d85760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bb6565b61016a55565b6060610169805480602002602001604051908101604052809291908181526020018280548015610a8657602002820191906000526020600020905b815481526020019060010190808311613319575050505050905090565b61333e613c34565b6001600160a01b0381166133ba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610bb6565b6133c381613c8e565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061347a57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806109f857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146109f8565b600054610100900460ff166122535760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bb6565b600054610100900460ff166135c45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bb6565b6119068282613f9e565b6000818152606760205260409020546001600160a01b03166113565760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610bb6565b600081815260696020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416908117909155819061367f82611c21565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806136c483611c21565b9050806001600160a01b0316846001600160a01b0316148061370b57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b8061372f5750836001600160a01b031661372484610cdb565b6001600160a01b0316145b949350505050565b826001600160a01b031661374a82611c21565b6001600160a01b0316146137c65760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610bb6565b6001600160a01b0382166138415760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610bb6565b61384e8383836001614034565b826001600160a01b031661386182611c21565b6001600160a01b0316146138dd5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610bb6565b600081815260696020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611356613c34565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156139c057610e2e83614169565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613a1a575060408051601f3d908101601f19168201909252613a1791810190615892565b60015b613a8c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610bb6565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114613b215760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610bb6565b50610e2e83838361423f565b60408051808201909152600381527f4d325800000000000000000000000000000000000000000000000000000000006020820152600090829082613b718383614264565b90506000198114613b8757506000949350505050565b60408051808201909152600381527f4e454f000000000000000000000000000000000000000000000000000000000060208201526000613bc78583614264565b90506000198114613bdf575060019695505050505050565b506000199695505050505050565b6000818152610164602052604090205415611356576040517fce006bf600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c9546001600160a01b031633146122535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bb6565b60c980546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16613d755760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bb6565b6122536143cf565b816001600160a01b0316836001600160a01b031603613dde5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610bb6565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613e56848484613737565b613e6284848484614455565b612ebc5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610bb6565b60606101668054610a0d90615480565b60606000613ef1836145f6565b600101905060008167ffffffffffffffff811115613f1157613f11614df6565b6040519080825280601f01601f191660200182016040528015613f3b576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084613f4557509392505050565b6119068282604051806020016040528060008152506146d8565b600054610100900460ff1661401b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bb6565b60656140278382615521565b506066610e2e8282615521565b60018111156140ab5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f7274656400000000000000000000006064820152608401610bb6565b816001600160a01b0385166141075761410281609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61412a565b836001600160a01b0316856001600160a01b03161461412a5761412a8582614761565b6001600160a01b03841661414657614141816147fe565b610cd4565b846001600160a01b0316846001600160a01b031614610cd457610cd484826148ad565b6001600160a01b0381163b6141e65760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610bb6565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b614248836148f1565b6000825111806142555750805b15610e2e57612ebc8383614931565b60008251825111156142de5760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f742066696e642061206c6f6e67657220737472696e6720696e206160448201527f2073686f72746572206f6e6500000000000000000000000000000000000000006064820152608401610bb6565b6000805b835185516142f091906156f9565b82116143c35750600060015b845182101561439f578482815181106143175761431761570c565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168661434984866158ab565b815181106143595761435961570c565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161461438d5750600061439f565b816143978161573b565b9250506142fc565b80156143b0578293505050506109f8565b50816143bb8161573b565b9250506142e2565b50600019949350505050565b600054610100900460ff1661444c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bb6565b61225333613c8e565b60006001600160a01b0384163b156145eb576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906144b29033908990889088906004016158be565b6020604051808303816000875af19250505080156144ed575060408051601f3d908101601f191682019092526144ea918101906158fa565b60015b6145a0573d80801561451b576040519150601f19603f3d011682016040523d82523d6000602084013e614520565b606091505b5080516000036145985760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610bb6565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a020000000000000000000000000000000000000000000000000000000014905061372f565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061463f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061466b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061468957662386f26fc10000830492506010015b6305f5e10083106146a1576305f5e100830492506008015b61271083106146b557612710830492506004015b606483106146c7576064830492506002015b600a83106109f85760010192915050565b6146e28383614a3c565b6146ef6000848484614455565b610e2e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610bb6565b6000600161476e846121a7565b61477891906156f9565b6000838152609860205260409020549091508082146147cb576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090614810906001906156f9565b6000838152609a6020526040812054609980549394509092849081106148385761483861570c565b9060005260206000200154905080609983815481106148595761485961570c565b6000918252602080832090910192909255828152609a9091526040808220849055858252812055609980548061489157614891615917565b6001900381819060005260206000200160009055905550505050565b60006148b8836121a7565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6148fa81614169565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6149b05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610bb6565b600080846001600160a01b0316846040516149cb9190615689565b600060405180830381855af49150503d8060008114614a06576040519150601f19603f3d011682016040523d82523d6000602084013e614a0b565b606091505b5091509150614a33828260405180606001604052806027815260200161594760279139614bed565b95945050505050565b6001600160a01b038216614a925760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610bb6565b6000818152606760205260409020546001600160a01b031615614af75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bb6565b614b05600083836001614034565b6000818152606760205260409020546001600160a01b031615614b6a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bb6565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60608315614bfc5750816128b9565b6128b98383815115614c115781518083602001fd5b8060405162461bcd60e51b8152600401610bb69190614de3565b828054828255906000526020600020908101928215614c6b579160200282015b82811115614c6b578251829060ff16905591602001919060010190614c4b565b50614c77929150614d33565b5090565b60405180606001604052806003906020820280368337509192915050565b828054828255906000526020600020908101928215614c6b579160200282015b82811115614c6b578251825591602001919060010190614cb9565b8260038101928215614c6b5791602002820182811115614c6b578251825591602001919060010190614cb9565b8260038101928215614c6b5791602002820182811115614c6b578251829060ff16905591602001919060010190614c4b565b5b80821115614c775760008155600101614d34565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461135657600080fd5b600060208284031215614d8857600080fd5b81356128b981614d48565b60005b83811015614dae578181015183820152602001614d96565b50506000910152565b60008151808452614dcf816020860160208601614d93565b601f01601f19169290920160200192915050565b6020815260006128b96020830184614db7565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614e4e57614e4e614df6565b604052919050565b600067ffffffffffffffff821115614e7057614e70614df6565b50601f01601f191660200190565b600082601f830112614e8f57600080fd5b8135614ea2614e9d82614e56565b614e25565b818152846020838601011115614eb757600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b038116811461135657600080fd5b600080600060608486031215614efe57600080fd5b833567ffffffffffffffff80821115614f1657600080fd5b614f2287838801614e7e565b94506020860135915080821115614f3857600080fd5b50614f4586828701614e7e565b9250506040840135614f5681614ed4565b809150509250925092565b600060208284031215614f7357600080fd5b5035919050565b60008060408385031215614f8d57600080fd5b8235614f9881614ed4565b946020939093013593505050565b600060208284031215614fb857600080fd5b81356128b981614ed4565b600080600060608486031215614fd857600080fd5b8335614fe381614ed4565b92506020840135614ff381614ed4565b929592945050506040919091013590565b60608101818360005b600381101561502c57815183526020928301929091019060010161500d565b50505092915050565b600082601f83011261504657600080fd5b8135602067ffffffffffffffff82111561506257615062614df6565b8160051b615071828201614e25565b928352848101820192828101908785111561508b57600080fd5b83870192505b848310156150aa57823582529183019190830190615091565b979650505050505050565b6000806000606084860312156150ca57600080fd5b83359250602084013567ffffffffffffffff808211156150e957600080fd5b6150f587838801615035565b9350604086013591508082111561510b57600080fd5b5061511886828701614e7e565b9150509250925092565b60006020828403121561513457600080fd5b813567ffffffffffffffff81111561514b57600080fd5b61372f84828501614e7e565b600081518084526020808501945080840160005b838110156151875781518752958201959082019060010161516b565b509495945050505050565b8051825260006020820151608060208501526151b16080850182615157565b9050604083015184820360408601526151ca8282614db7565b915050606083015160608501528091505092915050565b6020815260006128b96020830184615192565b6000806040838503121561520757600080fd5b823561521281614ed4565b9150602083013567ffffffffffffffff81111561522e57600080fd5b61523a85828601614e7e565b9150509250929050565b6020815260006128b96020830184615157565b60008060006060848603121561526c57600080fd5b505081359360208301359350604090920135919050565b60008060006060848603121561529857600080fd5b833567ffffffffffffffff8111156152af57600080fd5b6152bb86828701614e7e565b9660208601359650604090950135949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015615344577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452615332858351615192565b945092850192908501906001016152f8565b5092979650505050505050565b60006020828403121561536357600080fd5b813567ffffffffffffffff81111561537a57600080fd5b61372f84828501615035565b6000806040838503121561539957600080fd5b82356153a481614ed4565b9150602083013580151581146153b957600080fd5b809150509250929050565b600080604083850312156153d757600080fd5b50508035926020909101359150565b600080600080608085870312156153fc57600080fd5b843561540781614ed4565b9350602085013561541781614ed4565b925060408501359150606085013567ffffffffffffffff81111561543a57600080fd5b61544687828801614e7e565b91505092959194509250565b6000806040838503121561546557600080fd5b823561547081614ed4565b915060208301356153b981614ed4565b600181811c9082168061549457607f821691505b6020821081036154cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115610e2e57600081815260208120601f850160051c810160208610156154fa5750805b601f850160051c820191505b8181101561551957828155600101615506565b505050505050565b815167ffffffffffffffff81111561553b5761553b614df6565b61554f816155498454615480565b846154d3565b602080601f831160018114615584576000841561556c5750858301515b600019600386901b1c1916600185901b178555615519565b600085815260208120601f198616915b828110156155b357888601518255948401946001909101908401615594565b50858210156155d15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352600084546155f581615480565b8084870152604060018084166000811461561657600181146156305761565e565b60ff198516838a01528284151560051b8a0101955061565e565b896000528660002060005b858110156156565781548b820186015290830190880161563b565b8a0184019650505b509398975050505050505050565b60006020828403121561567e57600080fd5b81516128b981614ed4565b6000825161569b818460208701614d93565b9190910192915050565b6040815260006156b86040830185614db7565b8281036020840152614a338185615192565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156109f8576109f86156ca565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000600019820361574e5761574e6156ca565b5060010190565b60006020828403121561576757600080fd5b815167ffffffffffffffff81111561577e57600080fd5b8201601f8101841361578f57600080fd5b805161579d614e9d82614e56565b8181528560208385010111156157b257600080fd5b614a33826020830160208601614d93565b6000845160206157d68285838a01614d93565b8551918401916157e98184848a01614d93565b7f3f6e616d653d00000000000000000000000000000000000000000000000000009201918252845460069060009061582081615480565b60018281168015615838576001811461585157615881565b60ff198416868901528583151584028901019450615881565b8a6000528660002060005b848110156158775781548a820189015290830190880161585c565b5050858389010194505b50929b9a5050505050505050505050565b6000602082840312156158a457600080fd5b5051919050565b808201808211156109f8576109f86156ca565b60006001600160a01b038087168352808616602084015250836040830152608060608301526158f06080830184614db7565b9695505050505050565b60006020828403121561590c57600080fd5b81516128b981614d48565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a0ffc09e042b154ef4346017a770f233b3b530044de5d4145627cc4bf39f34ae64736f6c63430008120033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "LocationProofs(uint256,uint256[],string)": {
        "details": "Submit the location proofs of anything."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getLocationProofs(string,uint256,uint256)": {
        "details": "get the recent location proofs of anything."
      },
      "getStatus(uint256)": {
        "details": "Returns the status of the token."
      },
      "insertToMEP1002Slot(uint256,uint256,uint256)": {
        "details": "Inserts the MEP1004 token to the specified slot within a MEP1002 token."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "latestLocationProofs(string)": {
        "details": "get the latest location proofs of anything."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "numInsertedSlots(uint256)": {
        "details": "Returns the number of slots inserted with the MEP1004 token in the specified MEP1002 token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "removeFromMEP1002Slot(uint256,uint256,uint256)": {
        "details": "Removes the MEP1004 token from the specified slot within a MEP1002 token."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "slotLimits()": {
        "details": "Returns the limit number of slots that can be inserted with the MEP1002 token."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "whereSlot(uint256)": {
        "details": "search the MEP1004 token in the specified slot within a MEP1002 token."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 534,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 537,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2675,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2954,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 861,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 863,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 867,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 871,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 875,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 881,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1783,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1948,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1952,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1955,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1959,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2291,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4238,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "controllers",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 516,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 831,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8909,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_locationProofs",
        "offset": 0,
        "slot": "352",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(LocationProof)5816_storage)dyn_storage)"
      },
      {
        "astId": 8913,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_SNCodes",
        "offset": 0,
        "slot": "353",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 8920,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_MEP1002Slot",
        "offset": 0,
        "slot": "354",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 8926,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_whereSlot",
        "offset": 0,
        "slot": "355",
        "type": "t_mapping(t_uint256,t_array(t_uint256)3_storage)"
      },
      {
        "astId": 8930,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_MEP1004Status",
        "offset": 0,
        "slot": "356",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8934,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_MEP1004TokenNames",
        "offset": 0,
        "slot": "357",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 8936,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_baseUri",
        "offset": 0,
        "slot": "358",
        "type": "t_string_storage"
      },
      {
        "astId": 8938,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_mnsToken",
        "offset": 0,
        "slot": "359",
        "type": "t_address"
      },
      {
        "astId": 8940,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_MEP1002Addr",
        "offset": 0,
        "slot": "360",
        "type": "t_address"
      },
      {
        "astId": 8943,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_slotLimits",
        "offset": 0,
        "slot": "361",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 8945,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "_exitFee",
        "offset": 0,
        "slot": "362",
        "type": "t_uint256"
      },
      {
        "astId": 10166,
        "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
        "label": "__gap",
        "offset": 0,
        "slot": "363",
        "type": "t_array(t_uint256)39_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(LocationProof)5816_storage)dyn_storage": {
        "base": "t_struct(LocationProof)5816_storage",
        "encoding": "dynamic_array",
        "label": "struct IMEP1004.LocationProof[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)39_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[39]",
        "numberOfBytes": "1248"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(LocationProof)5816_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct IMEP1004.LocationProof[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LocationProof)5816_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)3_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)3_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LocationProof)5816_storage": {
        "encoding": "inplace",
        "label": "struct IMEP1004.LocationProof",
        "members": [
          {
            "astId": 5808,
            "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
            "label": "MEP1002TokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5811,
            "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
            "label": "MEP1004TokenIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5813,
            "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
            "label": "item",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 5815,
            "contract": "contracts/token/MEP1004Token.sol:MEP1004Token",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}