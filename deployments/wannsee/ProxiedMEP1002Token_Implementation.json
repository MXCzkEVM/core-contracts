{
  "address": "0x625C3af9c2499d3174e1f55742094A3B70452329",
  "abi": [
    {
      "inputs": [],
      "name": "ChildAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChildIndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721AddressZeroIsNotaValidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721ApproveCallerIsNotOwnerNorApprovedForAll",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721MintToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721NotApprovedOrOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TokenAlreadyMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferToNonReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IdZeroForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidGeolocation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsNotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxPendingChildrenReached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        }
      ],
      "name": "MaxRecursiveBurnsReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NestableTooDeep",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NestableTransferToDescendant",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NestableTransferToNonNestableImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NestableTransferToSelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoNamingPermission",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedOrDirectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingChildIndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedChildId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedNumberOfChildren",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AllChildrenRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "childIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        }
      ],
      "name": "ChildAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "childIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        }
      ],
      "name": "ChildProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "childIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "fromPending",
          "type": "bool"
        }
      ],
      "name": "ChildTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "MEP1002TokenUpdateName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NestTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "__Controllable_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "childIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        }
      ],
      "name": "acceptChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "addChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxChildrenBurns",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        }
      ],
      "name": "childIsInActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "childOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IERC6059.Child",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        }
      ],
      "name": "childrenOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IERC6059.Child[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "directOwnerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "geolocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "namingTokenAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "geolocation_",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destinationId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "nestTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "pendingChildOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IERC6059.Child",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        }
      ],
      "name": "pendingChildrenOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IERC6059.Child[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRejections",
          "type": "uint256"
        }
      ],
      "name": "rejectAllChildren",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "geolocation_",
          "type": "uint256"
        }
      ],
      "name": "resetName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mnsToken_",
          "type": "address"
        }
      ],
      "name": "setMNSToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "geolocation_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nameWrapperTokenId",
          "type": "uint256"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "namingTokenAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setNamingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "destinationId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "childIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPending",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x53cb8e76c8b942a6d340b8bfeb8747d7aa9a1f944118aabb9cfcd71c1169190c",
  "receipt": {
    "to": null,
    "from": "0x1Ea0de0ae730d5D12ED7cB429e220Bf4e1D0e234",
    "contractAddress": "0x625C3af9c2499d3174e1f55742094A3B70452329",
    "transactionIndex": 1,
    "gasUsed": "4805118",
    "logsBloom": "0x
    "blockHash": "0x40e5276712d7cf878263bd2096e48381429ad52e265e40508542e1c0e4e91b8d",
    "transactionHash": "0x53cb8e76c8b942a6d340b8bfeb8747d7aa9a1f944118aabb9cfcd71c1169190c",
    "logs": [],
    "blockNumber": 94,
    "cumulativeGasUsed": "4938888",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b614db82ce434773aec34039e091c348",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ChildAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChildIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721AddressZeroIsNotaValidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ApproveCallerIsNotOwnerNorApprovedForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MintToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TokenAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToNonReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IdZeroForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidGeolocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxPendingChildrenReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"MaxRecursiveBurnsReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NestableTooDeep\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NestableTransferToDescendant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NestableTransferToNonNestableImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NestableTransferToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoNamingPermission\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedOrDirectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingChildIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedChildId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedNumberOfChildren\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AllChildrenRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"ChildAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"ChildProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromPending\",\"type\":\"bool\"}],\"name\":\"ChildTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MEP1002TokenUpdateName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NestTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__Controllable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"acceptChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxChildrenBurns\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"childIsInActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"childOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC6059.Child\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"}],\"name\":\"childrenOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC6059.Child[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"directOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"geolocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"namingTokenAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"geolocation_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"nestTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"pendingChildOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC6059.Child\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"}],\"name\":\"pendingChildrenOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC6059.Child[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRejections\",\"type\":\"uint256\"}],\"name\":\"rejectAllChildren\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"geolocation_\",\"type\":\"uint256\"}],\"name\":\"resetName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mnsToken_\",\"type\":\"address\"}],\"name\":\"setMNSToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"geolocation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nameWrapperTokenId\",\"type\":\"uint256\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"namingTokenAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setNamingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPending\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"acceptChild(uint256,uint256,address,uint256)\":{\"details\":\"This moves the child token from parent token's pending child tokens array into the active child tokens  array.\",\"params\":{\"childAddress\":\"Address of the collection smart contract of the child token expected to be located at the  specified index of the given parent token's pending children array\",\"childId\":\"ID of the child token expected to be located at the specified index of the given parent token's  pending children array\",\"childIndex\":\"Index of a child tokem in the given parent's pending children array\",\"parentId\":\"ID of the parent token for which the child token is being accepted\"}},\"addChild(uint256,uint256,bytes)\":{\"details\":\"This adds the iichild token into the given parent token's pending child tokens array.You MUST NOT call this method directly. To add a a child to an NFT you must use either  `nestTransfer`, `nestMint` or `transferChild` to the NFT.Requirements:  - `ownerOf` on the child contract must resolve to the called contract.  - The pending array of the parent contract must not be full.\",\"params\":{\"childId\":\"ID of the new proposed child token\",\"data\":\"Additional data with no specified format\",\"parentId\":\"ID of the parent token to receive the new child token\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"ID of the token to burn\"}},\"burn(uint256,uint256)\":{\"details\":\"When a token is burned, its children are recursively burned as well.The approvals are cleared when the token is burned.Requirements:  - `tokenId` must exist.Emits a {Transfer} event.\",\"params\":{\"maxChildrenBurns\":\"Maximum children to recursively burn\",\"tokenId\":\"ID of the token to burn\"},\"returns\":{\"_0\":\"uint256 The number of recursive burns it took to burn all of the children\"}},\"childIsInActive(address,uint256)\":{\"params\":{\"childAddress\":\"Address of the given token's collection smart contract\",\"childId\":\"ID of the child token being checked\"},\"returns\":{\"_0\":\"bool A boolean value signifying whether the given child token is included in an active child tokens array  of a token (`true`) or not (`false`)\"}},\"childOf(uint256,uint256)\":{\"details\":\"Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]\",\"params\":{\"index\":\"Index of the child token in the parent token's active child tokens array\",\"parentId\":\"ID of the parent token for which the child is being retrieved\"},\"returns\":{\"_0\":\"struct A Child struct containing data about the specified child\"}},\"childrenOf(uint256)\":{\"details\":\"Returns array of Child structs existing for parent token.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]\",\"params\":{\"parentId\":\"ID of the parent token for which to retrieve the active child tokens\"},\"returns\":{\"_0\":\"struct[] An array of Child structs containing the parent token's active child tokens\"}},\"directOwnerOf(uint256)\":{\"details\":\"In the event the NFT is owned by an externally owned account, `tokenId` will be `0`.\",\"params\":{\"tokenId\":\"ID of the token for which the immediate owner is being retrieved\"},\"returns\":{\"_0\":\"address Address of the immediate owner. If the token is owned by an externally owned account, its address  will be returned. If the token is owned by another token, the parent token's collection smart contract address  is returned\",\"_1\":\"uint256 Token ID of the immediate owner. If the immediate owner is an externally owned account, the value  should be `0`\",\"_2\":\"bool A boolean value signifying whether the immediate owner is a token (`true`) or not (`false`)\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nestTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"The destination token MUST NOT be a child token of the token being transferred or one of its downstream  child tokens.\",\"params\":{\"destinationId\":\"ID of the token to receive the token being transferred\",\"from\":\"Address of the direct owner of the token to be transferred\",\"to\":\"Address of the receiving token's collection smart contract\",\"tokenId\":\"ID of the token being transferred\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Root owner is always the externally owned account.If the given token is owned by another token, it will recursively query the parent tokens until reaching the  root owner.\",\"params\":{\"tokenId\":\"ID of the token for which the root owner is being retrieved\"},\"returns\":{\"_0\":\"address Address of the root owner of the given token\"}},\"pendingChildOf(uint256,uint256)\":{\"details\":\"Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]\",\"params\":{\"index\":\"Index of the child token in the parent token's pending child tokens array\",\"parentId\":\"ID of the parent token for which the pending child token is being retrieved\"},\"returns\":{\"_0\":\"struct A Child struct containting data about the specified child\"}},\"pendingChildrenOf(uint256)\":{\"details\":\"Returns array of pending Child structs existing for given parent.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]\",\"params\":{\"parentId\":\"ID of the parent token for which to retrieve the pending child tokens\"},\"returns\":{\"_0\":\"struct[] An array of Child structs containing the parent token's pending child tokens\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"rejectAllChildren(uint256,uint256)\":{\"details\":\"Removes the children from the pending array mapping.This does not update the ownership storage data on children. If necessary, ownership can be reclaimed by the  rootOwner of the previous parent.\",\"params\":{\"tokenId\":\"ID of the parent token for which to reject all of the pending tokens\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)\":{\"params\":{\"childAddress\":\"Address of the child token's collection smart contract.\",\"childId\":\"ID of the child token in its own collection smart contract.\",\"childIndex\":\"Index of a token we are transferring, in the array it belongs to (can be either active array or  pending array)\",\"data\":\"Additional data with no specified format, sent in call to `_to`\",\"destinationId\":\"ID of the token to receive this child token (MUST be 0 if the destination is not a token)\",\"isPending\":\"A boolean value indicating whether the child token being transferred is in the pending array of the  parent token (`true`) or in the active array (`false`)\",\"to\":\"Address to which to transfer the token to\",\"tokenId\":\"ID of the parent token from which the child token is being transferred\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptChild(uint256,uint256,address,uint256)\":{\"notice\":\"@notice Used to accept a pending child token for a given parent token.\"},\"addChild(uint256,uint256,bytes)\":{\"notice\":\"Used to add a child token to a given parent token.\"},\"burn(uint256)\":{\"notice\":\"Used to burn a given token.\"},\"burn(uint256,uint256)\":{\"notice\":\"Used to burn a token.\"},\"childIsInActive(address,uint256)\":{\"notice\":\"Used to verify that the given child tokwn is included in an active array of a token.\"},\"childOf(uint256,uint256)\":{\"notice\":\"Used to retrieve a specific active child token for a given parent token.\"},\"childrenOf(uint256)\":{\"notice\":\"Used to retrieve the active child tokens of a given parent token.\"},\"directOwnerOf(uint256)\":{\"notice\":\"Used to retrieve the immediate owner of the given token.\"},\"nestTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Used to transfer the token into another token.\"},\"ownerOf(uint256)\":{\"notice\":\"Used to retrieve the root owner of the given token.\"},\"pendingChildOf(uint256,uint256)\":{\"notice\":\"Used to retrieve a specific pending child token from a given parent token.\"},\"pendingChildrenOf(uint256)\":{\"notice\":\"Used to retrieve the pending child tokens of a given parent token.\"},\"rejectAllChildren(uint256,uint256)\":{\"notice\":\"Used to reject all pending children of a given parent token.\"},\"transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)\":{\"notice\":\"Used to transfer a child token from a given parent token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/MEP1002Token.sol\":\"ProxiedMEP1002Token\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb8d68221343ed784c7b76edb6a686cb65e49c476d9e22bb89a5c0c3947ff14db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1599637b52d20dc3954cea44914b2a4a9a8a5caade58d9da947e0b6c9acc07ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/common/ControllableUpgradeable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport {\\r\\nOwnableUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract ControllableUpgradeable is OwnableUpgradeable {\\r\\n\\r\\n    mapping(address => bool) public controllers;\\r\\n\\r\\n    event ControllerChanged(address indexed controller, bool enabled);\\r\\n\\r\\n    modifier onlyController() {\\r\\n        require(\\r\\n            controllers[msg.sender],\\r\\n            \\\"Controllable: Caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setController(address controller, bool enabled) public onlyOwner {\\r\\n        controllers[controller] = enabled;\\r\\n        emit ControllerChanged(controller, enabled);\\r\\n    }\\r\\n\\r\\n    function __Controllable_init() public onlyInitializing {\\r\\n        controllers[msg.sender] = true;\\r\\n        __Ownable_init();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public override onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        assembly {\\r\\n            sstore(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103, newOwner)\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x6245dac1e31c30f49ba5539ba39e583628b97fe802e6efd6ec3e9c9b7ac63ba2\"},\"contracts/libs/H3Library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary H3Library {\\n    uint256 private constant _MIN_RESOLUTION = 7;\\n    uint256 private constant _MAX_RESOLUTION = 15;\\n\\n    uint256 private constant MAX_H3_RES = 15;\\n    uint256 private constant CENTER_DIGIT = 0;\\n    uint256 private constant H3_DIGIT_MASK = 7;\\n    uint256 private constant H3_MAX_OFFSET = 63;\\n    uint256 private constant H3_HIGH_BIT_MASK = 1 << H3_MAX_OFFSET;\\n    uint256 private constant H3_MODE_OFFSET = 59;\\n    uint256 private constant H3_MODE_MASK = 15 << H3_MODE_OFFSET;\\n    uint256 private constant H3_RESERVED_OFFSET = 56;\\n    uint256 private constant H3_RESERVED_MASK = 7 << H3_RESERVED_OFFSET;\\n    uint256 private constant H3_BC_OFFSET = 45;\\n    uint256 private constant H3_BC_MASK = 127 << H3_BC_OFFSET;\\n    uint256 private constant H3_PER_DIGIT_OFFSET = 3;\\n    uint256 private constant NUM_BASE_CELLS = 122;\\n    uint256 private constant INVALID_DIGIT = 7;\\n    uint256 private constant NUM_DIGITS = 7;\\n    uint256 private constant K_AXES_DIGIT = 1;\\n    uint256 private constant H3_CELL_MODE = 1;\\n    uint256 private constant H3_RES_OFFSET = 52;\\n    uint256 private constant H3_RES_MASK = 15 << H3_RES_OFFSET;\\n    uint256 private constant H3_RES_MASK_NEGATIVE = ~H3_RES_MASK;\\n\\n    function getMinResolution() internal pure returns (uint256) {\\n        return _MIN_RESOLUTION;\\n    }\\n\\n    function isValidCell(uint256 h3) internal pure returns (bool) {\\n        if (getHighBit(h3) != 0) return false;\\n\\n        if (getMode(h3) != H3_CELL_MODE) return false;\\n\\n        if (getReservedBits(h3) != 0) return false;\\n\\n        uint256 baseCell = getBaseCell(h3);\\n\\n        if (baseCell < 0 || baseCell > NUM_BASE_CELLS) {\\n            return false;\\n        }\\n\\n        uint256 res = getResolution(h3);\\n\\n        if (res < _MIN_RESOLUTION || res > _MAX_RESOLUTION) {\\n            return false;\\n        }\\n\\n        bool foundFirstNonZeroDigit = false;\\n        for (uint256 i = 1; i <= res; i++) {\\n            uint256 digit = getIndexDigit(h3, i);\\n\\n            if (!foundFirstNonZeroDigit && digit != CENTER_DIGIT) {\\n                foundFirstNonZeroDigit = true;\\n                if (_isBaseCellPentagon(baseCell) && digit == K_AXES_DIGIT) {\\n                    return false;\\n                }\\n            }\\n\\n            if (digit < CENTER_DIGIT || digit >= NUM_DIGITS) {\\n                return false;\\n            }\\n        }\\n\\n        for (uint256 i = res + 1; i <= MAX_H3_RES; i++) {\\n            if (getIndexDigit(h3, i) != INVALID_DIGIT) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function getResolution(uint256 h3) internal pure returns (uint256) {\\n        return ((h3 & H3_RES_MASK) >> H3_RES_OFFSET);\\n    }\\n\\n    function cellToParent(\\n        uint256 h3Index,\\n        uint256 parentRes\\n    ) internal pure returns (uint256) {\\n        uint256 childRes = getResolution(h3Index);\\n        if (parentRes < 0 || parentRes > MAX_H3_RES) {\\n            return 0;\\n        } else if (parentRes > childRes) {\\n            return 0;\\n        } else if (parentRes == childRes) {\\n            return h3Index;\\n        }\\n\\n        uint256 parentH = h3SetResolution(h3Index, parentRes);\\n\\n        // TODO: fix\\n        for (uint256 i = parentRes + 1; i <= childRes; i++) {\\n            parentH = h3SetIndexDigit(parentH, i, H3_DIGIT_MASK);\\n        }\\n\\n        return parentH;\\n    }\\n\\n    function h3SetIndexDigit(\\n        uint256 h3Index,\\n        uint256 res,\\n        uint256 digit\\n    ) internal pure returns (uint256) {\\n        return\\n            (h3Index &\\n                ~(\\n                    (H3_DIGIT_MASK <<\\n                        ((MAX_H3_RES - (res)) * H3_PER_DIGIT_OFFSET))\\n                )) | ((digit << (MAX_H3_RES - res)) * H3_PER_DIGIT_OFFSET);\\n    }\\n\\n    function h3SetResolution(\\n        uint256 h3Index,\\n        uint256 parentRes\\n    ) internal pure returns (uint256) {\\n        return (h3Index & H3_RES_MASK_NEGATIVE) | (parentRes << H3_RES_OFFSET);\\n    }\\n\\n    function getHighBit(uint256 h3) internal pure returns (uint256) {\\n        return (h3 & H3_HIGH_BIT_MASK) >> H3_MAX_OFFSET;\\n    }\\n\\n    function getMode(uint256 h3) internal pure returns (uint256) {\\n        return (h3 & H3_MODE_MASK) >> H3_MODE_OFFSET;\\n    }\\n\\n    function getReservedBits(uint256 h3) internal pure returns (uint256) {\\n        return (h3 & H3_RESERVED_MASK) >> H3_RESERVED_OFFSET;\\n    }\\n\\n    function getBaseCell(uint256 h3) internal pure returns (uint256) {\\n        return (h3 & H3_BC_MASK) >> H3_BC_OFFSET;\\n    }\\n\\n    function getIndexDigit(\\n        uint256 h3,\\n        uint256 res\\n    ) internal pure returns (uint256) {\\n        return\\n            (h3 >> ((MAX_H3_RES - res) * H3_PER_DIGIT_OFFSET)) & H3_DIGIT_MASK;\\n    }\\n\\n    function _isBaseCellPentagon(\\n        uint256 baseCell\\n    ) internal pure returns (bool) {\\n        if (baseCell < 0 || baseCell >= NUM_BASE_CELLS) {\\n            return false;\\n        }\\n        return baseCellData(baseCell) == 1;\\n    }\\n\\n    function baseCellData(uint256 baseCell) internal pure returns (uint8) {\\n        uint8[NUM_BASE_CELLS] memory baseCellDatas = [\\n            0,\\n            0,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            1,\\n            0,\\n            0,\\n            0,\\n            0\\n        ];\\n        return baseCellDatas[baseCell];\\n    }\\n}\\n\",\"keccak256\":\"0x56b39a2b6fa0b11f6e1a27b83e39d22177905a921e79da0e22519725410c3efc\",\"license\":\"MIT\"},\"contracts/mns/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"contracts/mns/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/mns/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"contracts/mns/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"contracts/mns/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"},\"contracts/token/IERC6059.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IERC6059 {\\n    struct DirectOwner {\\n        uint256 tokenId;\\n        address ownerAddress;\\n    }\\n\\n    event NestTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 fromTokenId,\\n        uint256 toTokenId,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ChildProposed(\\n        uint256 indexed tokenId,\\n        uint256 childIndex,\\n        address indexed childAddress,\\n        uint256 indexed childId\\n    );\\n\\n    event ChildAccepted(\\n        uint256 indexed tokenId,\\n        uint256 childIndex,\\n        address indexed childAddress,\\n        uint256 indexed childId\\n    );\\n\\n    event AllChildrenRejected(uint256 indexed tokenId);\\n\\n    event ChildTransferred(\\n        uint256 indexed tokenId,\\n        uint256 childIndex,\\n        address indexed childAddress,\\n        uint256 indexed childId,\\n        bool fromPending\\n    );\\n\\n    struct Child {\\n        uint256 tokenId;\\n        address contractAddress;\\n    }\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function directOwnerOf(\\n        uint256 tokenId\\n    ) external view returns (address, uint256, bool);\\n\\n    function burn(\\n        uint256 tokenId,\\n        uint256 maxRecursiveBurns\\n    ) external returns (uint256);\\n\\n    function addChild(\\n        uint256 parentId,\\n        uint256 childId,\\n        bytes memory data\\n    ) external;\\n\\n    function acceptChild(\\n        uint256 parentId,\\n        uint256 childIndex,\\n        address childAddress,\\n        uint256 childId\\n    ) external;\\n\\n    function rejectAllChildren(\\n        uint256 parentId,\\n        uint256 maxRejections\\n    ) external;\\n\\n    function transferChild(\\n        uint256 tokenId,\\n        address to,\\n        uint256 destinationId,\\n        uint256 childIndex,\\n        address childAddress,\\n        uint256 childId,\\n        bool isPending,\\n        bytes memory data\\n    ) external;\\n\\n    function childrenOf(\\n        uint256 parentId\\n    ) external view returns (Child[] memory);\\n\\n    function pendingChildrenOf(\\n        uint256 parentId\\n    ) external view returns (Child[] memory);\\n\\n    function childOf(\\n        uint256 parentId,\\n        uint256 index\\n    ) external view returns (Child memory);\\n\\n    function pendingChildOf(\\n        uint256 parentId,\\n        uint256 index\\n    ) external view returns (Child memory);\\n\\n    function nestTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 destinationId,\\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6daf3add9929e4b1d425bb584d7f677e7afa85be2fff1a4172f6d53c82b52603\",\"license\":\"MIT\"},\"contracts/token/IMEP1002.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/* is ERC6059 */ interface IMEP1002 {\\n    // Returns the h3geo coordinate of the MEP1002.\\n    function geolocation(uint256 _tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6c5d57c2abfed55ce094ef9d31982995a2d29e1857d5b9f1592434eb4fb05818\",\"license\":\"MIT\"},\"contracts/token/IMEP1002NamingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IMEP1002NamingToken {\\n\\n    function mint(address to, uint256 tokenId) external;\\n\\n    function setBaseURI(string memory baseURI_) external;\\n}\\n\",\"keccak256\":\"0x1fa3dfac18fa5ef75d7b25dbd3dcbbabf4912b5f3a25526c1e8e3fa02a524c11\",\"license\":\"MIT\"},\"contracts/token/MEP1002Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {IMEP1002} from \\\"./IMEP1002.sol\\\";\\r\\nimport {IERC6059} from \\\"./IERC6059.sol\\\";\\r\\nimport {IMEP1002NamingToken} from \\\"./IMEP1002NamingToken.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {\\r\\nERC721Holder\\r\\n} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport {\\r\\nIERC721Receiver\\r\\n} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport {\\r\\nIERC165Upgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\r\\nimport {\\r\\nIERC721Metadata\\r\\n} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport {\\r\\nIERC721MetadataUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\r\\nimport {\\r\\nIERC721EnumerableUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\r\\nimport {\\r\\nIERC721Upgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\nimport {\\r\\nIERC721ReceiverUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\r\\nimport {\\r\\nAddressUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport {\\r\\nContextUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport {\\r\\nStringsUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\r\\nimport {\\r\\nERC165Upgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\r\\nimport {\\r\\nUUPSUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport {ControllableUpgradeable} from \\\"../common/ControllableUpgradeable.sol\\\";\\r\\nimport {INameWrapper} from \\\"../mns/wrapper/INameWrapper.sol\\\";\\r\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport {Proxied} from \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\r\\n\\r\\nimport {H3Library} from \\\"../libs/H3Library.sol\\\";\\r\\n//import {Controllable} from \\\"../common/Controllable.sol\\\";\\r\\n\\r\\n    error ChildAlreadyExists();\\r\\n    error ChildIndexOutOfRange();\\r\\n    error ERC721AddressZeroIsNotaValidOwner();\\r\\n    error ERC721ApprovalToCurrentOwner();\\r\\n    error ERC721ApproveCallerIsNotOwnerNorApprovedForAll();\\r\\n    error ERC721ApproveToCaller();\\r\\n    error ERC721InvalidTokenId();\\r\\n    error ERC721MintToTheZeroAddress();\\r\\n    error ERC721NotApprovedOrOwner();\\r\\n    error ERC721TokenAlreadyMinted();\\r\\n    error ERC721TransferFromIncorrectOwner();\\r\\n    error ERC721TransferToNonReceiverImplementer();\\r\\n    error ERC721TransferToTheZeroAddress();\\r\\n    error IdZeroForbidden();\\r\\n    error IsNotContract();\\r\\n    error MaxPendingChildrenReached();\\r\\n    error MaxRecursiveBurnsReached(address childContract, uint256 childId);\\r\\n    error MintToNonNestableImplementer();\\r\\n    error NestableTooDeep();\\r\\n    error NestableTransferToDescendant();\\r\\n    error NestableTransferToNonNestableImplementer();\\r\\n    error NestableTransferToSelf();\\r\\n    error NotApprovedOrDirectOwner();\\r\\n    error PendingChildIndexOutOfRange();\\r\\n    error UnexpectedChildId();\\r\\n    error UnexpectedNumberOfChildren();\\r\\n\\r\\n    error InvalidGeolocation();\\r\\n    error NoNamingPermission();\\r\\n\\r\\n/**\\r\\n * @title NestableToken\\r\\n * @author MXCZKEvmTeam\\r\\n * @notice Smart contract of the Nestable module.\\r\\n * @dev This contract is hierarchy agnostic and can support an arbitrary number of nested levels up and down, as long as\\r\\n *  gas limits allow it.\\r\\n */\\r\\n\\r\\ncontract MEP1002Token is\\r\\nControllableUpgradeable,\\r\\nIMEP1002,\\r\\nIERC6059,\\r\\nIERC721EnumerableUpgradeable,\\r\\nIERC721MetadataUpgradeable,\\r\\nERC721Holder\\r\\n{\\r\\n    using Counters for Counters.Counter;\\r\\n    using AddressUpgradeable for address;\\r\\n    using StringsUpgradeable for uint256;\\r\\n    using H3Library for uint256;\\r\\n\\r\\n    uint256 private constant _MAX_LEVELS_TO_CHECK_FOR_INHERITANCE_LOOP = 100;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approver address to approved address\\r\\n    // The approver is necessary so approvals are invalidated for nested children on transfer\\r\\n    // WARNING: If a child NFT returns to a previous root owner, old permissions would be active again\\r\\n    mapping(uint256 => mapping(address => address)) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    // ------------------- NESTABLE --------------\\r\\n\\r\\n    // Mapping from token ID to DirectOwner struct\\r\\n    mapping(uint256 => DirectOwner) private _directOwners;\\r\\n\\r\\n    // Mapping of tokenId to array of active children structs\\r\\n    mapping(uint256 => Child[]) private _activeChildren;\\r\\n\\r\\n    // Mapping of tokenId to array of pending children structs\\r\\n    mapping(uint256 => Child[]) private _pendingChildren;\\r\\n\\r\\n    // Mapping of child token address to child token ID to whether they are pending or active on any token\\r\\n    // We might have a first extra mapping from token ID, but since the same child cannot be nested into multiple tokens\\r\\n    //  we can strip it for size/gas savings.\\r\\n    mapping(address => mapping(uint256 => uint256)) internal _childIsInActive;\\r\\n\\r\\n    mapping(uint256 => string) public tokenNames;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // TokenId counter\\r\\n    Counters.Counter private _tokenIds;\\r\\n\\r\\n    string private _baseUri;\\r\\n\\r\\n    address private _namingToken;\\r\\n\\r\\n    address private _mnsToken;\\r\\n\\r\\n    event MEP1002TokenUpdateName(\\r\\n        uint256 indexed tokenId,\\r\\n        string name\\r\\n    );\\r\\n\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address namingTokenAddr\\r\\n    ) external initializer {\\r\\n        __Controllable_init();\\r\\n        __MEP1002_init(name_, symbol_);\\r\\n        _namingToken = namingTokenAddr;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory baseURI_) external onlyController {\\r\\n        _baseUri = baseURI_;\\r\\n    }\\r\\n\\r\\n    function setMNSToken(address mnsToken_) external onlyController {\\r\\n        _mnsToken = mnsToken_;\\r\\n    }\\r\\n\\r\\n    function setNamingToken(address namingTokenAddr, string memory baseURI_) external onlyController {\\r\\n        _namingToken = namingTokenAddr;\\r\\n        IMEP1002NamingToken(namingTokenAddr).setBaseURI(baseURI_);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 geolocation_) external {\\r\\n        if (!geolocation_.isValidCell()) revert InvalidGeolocation();\\r\\n        if (_exists(geolocation_)) revert ERC721TokenAlreadyMinted();\\r\\n        //        bool hasParent = false;\\r\\n        uint256 res = geolocation_.getResolution();\\r\\n        if (res != H3Library.getMinResolution()) revert InvalidGeolocation();\\r\\n        //        for (uint256 i = 0; i < res - H3Library.getMinResolution(); i++) {\\r\\n        //            uint256 parentGeolocation = geolocation_.cellToParent(res - (i + 1));\\r\\n        //            if(parentGeolocation == 0) break;\\r\\n        //            if(parentGeolocation == geolocation_) break;\\r\\n        //            this.mint(parentGeolocation);\\r\\n        //            hasParent = true;\\r\\n        //        }\\r\\n        _tokenIds.increment();\\r\\n        //        if(hasParent) {\\r\\n        //            parentTokenId = tokenId - 1;\\r\\n        //            _nestMint(address(this), tokenId, parentTokenId, \\\"\\\");\\r\\n        //        }else {\\r\\n        _safeMint(address(this), geolocation_);\\r\\n        //        }\\r\\n        IMEP1002NamingToken(_namingToken).mint(_msgSender(), geolocation_);\\r\\n        emit MEP1002TokenUpdateName(\\r\\n            geolocation_,\\r\\n            tokenNames[geolocation_]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setName(uint256 geolocation_, uint256 nameWrapperTokenId) external {\\r\\n        _requireMinted(geolocation_);\\r\\n        if (IERC721(_namingToken).ownerOf(geolocation_) != _msgSender())\\r\\n            revert NoNamingPermission();\\r\\n        if (INameWrapper(_mnsToken).ownerOf(nameWrapperTokenId) != _msgSender())\\r\\n            revert NoNamingPermission();\\r\\n\\r\\n        bytes memory newName = INameWrapper(_mnsToken).names(bytes32(nameWrapperTokenId));\\r\\n        if (keccak256(newName) == keccak256(abi.encodePacked(\\\"\\\"))) {\\r\\n            return;\\r\\n        }\\r\\n        tokenNames[geolocation_] = string(abi.encodePacked(newName));\\r\\n        emit MEP1002TokenUpdateName(\\r\\n            geolocation_,\\r\\n            tokenNames[geolocation_]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function resetName(uint256 geolocation_) external {\\r\\n        _requireMinted(geolocation_);\\r\\n        if (IERC721(_namingToken).ownerOf(geolocation_) != _msgSender())\\r\\n            revert NoNamingPermission();\\r\\n        tokenNames[geolocation_] = \\\"\\\";\\r\\n        emit MEP1002TokenUpdateName(\\r\\n            geolocation_,\\r\\n            tokenNames[geolocation_]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function geolocation(uint256 tokenId) external view returns (uint256) {\\r\\n        _requireMinted(tokenId);\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    )\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(IERC165Upgradeable)\\r\\n    returns (bool)\\r\\n    {\\r\\n        return\\r\\n        interfaceId == type(IERC721Upgradeable).interfaceId ||\\r\\n        interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\r\\n        interfaceId == type(IERC6059).interfaceId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n        if (owner == address(this)) {\\r\\n            return index;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _tokenIds.current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return \\\"MEP1002 Hexagon\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view virtual override returns (string memory) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n\\r\\n        return bytes(baseURI).length > 0 ? string(\\r\\n            abi.encodePacked(\\r\\n                baseURI,\\r\\n                tokenId.toString(),\\r\\n                \\\"?name=\\\",\\r\\n                tokenNames[tokenId]\\r\\n            )\\r\\n        ) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    function __MEP1002_init(\\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) internal onlyInitializing {\\r\\n        __MEP1002_init_unchained(name_, symbol_);\\r\\n    }\\r\\n\\r\\n    function __MEP1002_init_unchained(\\r\\n        string memory name_,\\r\\n        string memory symbol_\\r\\n    ) internal onlyInitializing {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return _baseUri;\\r\\n    }\\r\\n\\r\\n    // -------------------------- MODIFIERS ----------------------------\\r\\n\\r\\n    /**\\r\\n     * @notice Used to verify that the caller is either the owner of the token or approved to manage it by its owner.\\r\\n     * @dev If the caller is not the owner of the token or approved to manage it by its owner, the execution will be\\r\\n     *  reverted.\\r\\n     * @param tokenId ID of the token to check\\r\\n     */\\r\\n    function _onlyApprovedOrOwner(uint256 tokenId) private view {\\r\\n        if (!_isApprovedOrOwner(_msgSender(), tokenId))\\r\\n            revert ERC721NotApprovedOrOwner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to verify that the caller is either the owner of the token or approved to manage it by its owner.\\r\\n     * @param tokenId ID of the token to check\\r\\n     */\\r\\n    modifier onlyApprovedOrOwner(uint256 tokenId) {\\r\\n        _onlyApprovedOrOwner(tokenId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to verify that the caller is approved to manage the given token or it its direct owner.\\r\\n     * @dev This does not delegate to ownerOf, which returns the root owner, but rater uses an owner from DirectOwner\\r\\n     *  struct.\\r\\n     * @dev The execution is reverted if the caller is not immediate owner or approved to manage the given token.\\r\\n     * @dev Used for parent-scoped transfers.\\r\\n     * @param tokenId ID of the token to check.\\r\\n     */\\r\\n    function _onlyApprovedOrDirectOwner(uint256 tokenId) private view {\\r\\n        if (!_isApprovedOrDirectOwner(_msgSender(), tokenId))\\r\\n            revert NotApprovedOrDirectOwner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to verify that the caller is approved to manage the given token or is its direct owner.\\r\\n     * @param tokenId ID of the token to check\\r\\n     */\\r\\n    modifier onlyApprovedOrDirectOwner(uint256 tokenId) {\\r\\n        _onlyApprovedOrDirectOwner(tokenId);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ------------------------------- ERC721 ---------------------------------\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC721Upgradeable\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\r\\n        if (owner == address(0)) revert ERC721AddressZeroIsNotaValidOwner();\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////\\r\\n    //              TRANSFERS\\r\\n    ////////////////////////////////////////\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC721Upgradeable\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual onlyApprovedOrDirectOwner(tokenId) {\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC721Upgradeable\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC721Upgradeable\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) public virtual onlyApprovedOrDirectOwner(tokenId) {\\r\\n        _safeTransfer(from, to, tokenId, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to transfer the token into another token.\\r\\n     * @dev The destination token MUST NOT be a child token of the token being transferred or one of its downstream\\r\\n     *  child tokens.\\r\\n     * @param from Address of the direct owner of the token to be transferred\\r\\n     * @param to Address of the receiving token's collection smart contract\\r\\n     * @param tokenId ID of the token being transferred\\r\\n     * @param destinationId ID of the token to receive the token being transferred\\r\\n     */\\r\\n    function nestTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 destinationId,\\r\\n        bytes memory data\\r\\n    ) public virtual onlyApprovedOrDirectOwner(tokenId) {\\r\\n        _nestTransfer(from, to, tokenId, destinationId, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to safely transfer the token form `from` to `to`.\\r\\n     * @dev The function checks that contract recipients are aware of the ERC721 protocol to prevent tokens from being\\r\\n     *  forever locked.\\r\\n     * @dev This internal function is equivalent to {safeTransferFrom}, and can be used to e.g. implement alternative\\r\\n     *  mechanisms to perform token transfer, such as signature-based.\\r\\n     * @dev Requirements:\\r\\n     *\\r\\n     *  - `from` cannot be the zero address.\\r\\n     *  - `to` cannot be the zero address.\\r\\n     *  - `tokenId` token must exist and be owned by `from`.\\r\\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     * @dev Emits a {Transfer} event.\\r\\n     * @param from Address of the account currently owning the given token\\r\\n     * @param to Address to transfer the token to\\r\\n     * @param tokenId ID of the token to transfer\\r\\n     * @param data Additional data with no specified format, sent in call to `to`\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        if (!_checkOnERC721Received(from, to, tokenId, data))\\r\\n            revert ERC721TransferToNonReceiverImplementer();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to transfer the token from `from` to `to`.\\r\\n     * @dev As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     * @dev Requirements:\\r\\n     *\\r\\n     *  - `to` cannot be the zero address.\\r\\n     *  - `tokenId` token must be owned by `from`.\\r\\n     * @dev Emits a {Transfer} event.\\r\\n     * @param from Address of the account currently owning the given token\\r\\n     * @param to Address to transfer the token to\\r\\n     * @param tokenId ID of the token to transfer\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        (address immediateOwner, uint256 parentId,) = directOwnerOf(tokenId);\\r\\n        if (immediateOwner != from) revert ERC721TransferFromIncorrectOwner();\\r\\n        if (to == address(0)) revert ERC721TransferToTheZeroAddress();\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n        _beforeNestedTokenTransfer(immediateOwner, to, parentId, 0, tokenId);\\r\\n\\r\\n        _balances[from] -= 1;\\r\\n        _updateOwnerAndClearApprovals(tokenId, 0, to);\\r\\n        _balances[to] += 1;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        emit NestTransfer(immediateOwner, to, parentId, 0, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(from, to, tokenId);\\r\\n        _afterNestedTokenTransfer(immediateOwner, to, parentId, 0, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to transfer a token into another token.\\r\\n     * @dev Attempting to nest a token into `0x0` address will result in reverted transaction.\\r\\n     * @dev Attempting to nest a token into itself will result in reverted transaction.\\r\\n     * @param from Address of the account currently owning the given token\\r\\n     * @param to Address of the receiving token's collection smart contract\\r\\n     * @param tokenId ID of the token to transfer\\r\\n     * @param destinationId ID of the token receiving the given token\\r\\n     * @param data Additional data with no specified format, sent in the addChild call\\r\\n     */\\r\\n    function _nestTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 destinationId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        (address immediateOwner, uint256 parentId,) = directOwnerOf(tokenId);\\r\\n        if (immediateOwner != from) revert ERC721TransferFromIncorrectOwner();\\r\\n        if (to == address(0)) revert ERC721TransferToTheZeroAddress();\\r\\n        if (to == address(this) && tokenId == destinationId)\\r\\n            revert NestableTransferToSelf();\\r\\n\\r\\n        // Destination contract checks:\\r\\n        // It seems redundant, but otherwise it would revert with no error\\r\\n        if (!to.isContract()) revert IsNotContract();\\r\\n        if (!IERC165(to).supportsInterface(type(IERC6059).interfaceId))\\r\\n            revert NestableTransferToNonNestableImplementer();\\r\\n        _checkForInheritanceLoop(tokenId, to, destinationId);\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n        _beforeNestedTokenTransfer(\\r\\n            immediateOwner,\\r\\n            to,\\r\\n            parentId,\\r\\n            destinationId,\\r\\n            tokenId\\r\\n        );\\r\\n        _balances[from] -= 1;\\r\\n        _updateOwnerAndClearApprovals(tokenId, destinationId, to);\\r\\n        _balances[to] += 1;\\r\\n\\r\\n        // Sending to NFT:\\r\\n        _sendToNFT(immediateOwner, to, parentId, destinationId, tokenId, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to send a token to another token.\\r\\n     * @dev If the token being sent is currently owned by an externally owned account, the `parentId` should equal `0`.\\r\\n     * @dev Emits {Transfer} event.\\r\\n     * @dev Emits {NestTransfer} event.\\r\\n     * @param from Address from which the token is being sent\\r\\n     * @param to Address of the collection smart contract of the token to receive the given token\\r\\n     * @param parentId ID of the current parent token of the token being sent\\r\\n     * @param destinationId ID of the tokento receive the token being sent\\r\\n     * @param tokenId ID of the token being sent\\r\\n     * @param data Additional data with no specified format, sent in the addChild call\\r\\n     */\\r\\n    function _sendToNFT(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 parentId,\\r\\n        uint256 destinationId,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) private {\\r\\n        IERC6059 destContract = IERC6059(to);\\r\\n        destContract.addChild(destinationId, tokenId, data);\\r\\n        _afterTokenTransfer(from, to, tokenId);\\r\\n        _afterNestedTokenTransfer(from, to, parentId, destinationId, tokenId);\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        emit NestTransfer(from, to, parentId, destinationId, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to check if nesting a given token into a specified token would create an inheritance loop.\\r\\n     * @dev If a loop would occur, the tokens would be unmanageable, so the execution is reverted if one is detected.\\r\\n     * @dev The check for inheritance loop is bounded to guard against too much gas being consumed.\\r\\n     * @param currentId ID of the token that would be nested\\r\\n     * @param targetContract Address of the collection smart contract of the token into which the given token would be\\r\\n     *  nested\\r\\n     * @param targetId ID of the token into which the given token would be nested\\r\\n     */\\r\\n    function _checkForInheritanceLoop(\\r\\n        uint256 currentId,\\r\\n        address targetContract,\\r\\n        uint256 targetId\\r\\n    ) private view {\\r\\n        for (uint256 i; i < _MAX_LEVELS_TO_CHECK_FOR_INHERITANCE_LOOP;) {\\r\\n            (\\r\\n            address nextOwner,\\r\\n            uint256 nextOwnerTokenId,\\r\\n            bool isNft\\r\\n            ) = IERC6059(targetContract).directOwnerOf(targetId);\\r\\n            // If there's a final address, we're good. There's no loop.\\r\\n            if (!isNft) {\\r\\n                return;\\r\\n            }\\r\\n            // Ff the current nft is an ancestor at some point, there is an inheritance loop\\r\\n            if (nextOwner == address(this) && nextOwnerTokenId == currentId) {\\r\\n                revert NestableTransferToDescendant();\\r\\n            }\\r\\n            // We reuse the parameters to save some contract size\\r\\n            targetContract = nextOwner;\\r\\n            targetId = nextOwnerTokenId;\\r\\n        unchecked {\\r\\n            ++i;\\r\\n        }\\r\\n        }\\r\\n        revert NestableTooDeep();\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////\\r\\n    //              MINTING\\r\\n    ////////////////////////////////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Used to safely mint a token to a specified address.\\r\\n     * @dev Requirements:\\r\\n     *\\r\\n     *  - `tokenId` must not exist.\\r\\n     *  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     * @dev Emits a {Transfer} event.\\r\\n     * @param to Address to which to safely mint the gven token\\r\\n     * @param tokenId ID of the token to mint to the specified address\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to safely mint the token to the specified address while passing the additional data to contract\\r\\n     *  recipients.\\r\\n     * @param to Address to which to mint the token\\r\\n     * @param tokenId ID of the token to mint\\r\\n     * @param data Additional data to send with the tokens\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        if (!_checkOnERC721Received(address(0), to, tokenId, data))\\r\\n            revert ERC721TransferToNonReceiverImplementer();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to mint a specified token to a given address.\\r\\n     * @dev WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible.\\r\\n     * @dev Requirements:\\r\\n     *\\r\\n     *  - `tokenId` must not exist.\\r\\n     *  - `to` cannot be the zero address.\\r\\n     * @dev Emits a {Transfer} event.\\r\\n     * @param to Address to mint the token to\\r\\n     * @param tokenId ID of the token to mint\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        _innerMint(to, tokenId, 0);\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n        emit NestTransfer(address(0), to, 0, 0, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(address(0), to, tokenId);\\r\\n        _afterNestedTokenTransfer(address(0), to, 0, 0, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to mint a child token to a given parent token.\\r\\n     * @param to Address of the collection smart contract of the token into which to mint the child token\\r\\n     * @param tokenId ID of the token to mint\\r\\n     * @param destinationId ID of the token into which to mint the new child token\\r\\n     * @param data Additional data with no specified format, sent in the addChild call\\r\\n     */\\r\\n    function _nestMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 destinationId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        // It seems redundant, but otherwise it would revert with no error\\r\\n        if (!to.isContract()) revert IsNotContract();\\r\\n        if (!IERC165(to).supportsInterface(type(IERC6059).interfaceId))\\r\\n            revert MintToNonNestableImplementer();\\r\\n\\r\\n        _innerMint(to, tokenId, destinationId);\\r\\n        _sendToNFT(address(0), to, 0, destinationId, tokenId, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to mint a child token into a given parent token.\\r\\n     * @dev Requirements:\\r\\n     *\\r\\n     *  - `to` cannot be the zero address.\\r\\n     *  - `tokenId` must not exist.\\r\\n     *  - `tokenId` must not be `0`.\\r\\n     * @param to Address of the collection smart contract of the token into which to mint the child token\\r\\n     * @param tokenId ID of the token to mint\\r\\n     * @param destinationId ID of the token into which to mint the new token\\r\\n     */\\r\\n    function _innerMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 destinationId\\r\\n    ) private {\\r\\n        if (to == address(0)) revert ERC721MintToTheZeroAddress();\\r\\n        if (_exists(tokenId)) revert ERC721TokenAlreadyMinted();\\r\\n        if (tokenId == 0) revert IdZeroForbidden();\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n        _beforeNestedTokenTransfer(address(0), to, 0, destinationId, tokenId);\\r\\n\\r\\n        _balances[to] += 1;\\r\\n        _directOwners[tokenId] = DirectOwner({\\r\\n            ownerAddress: to,\\r\\n            tokenId: destinationId\\r\\n        });\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////\\r\\n    //              Ownership\\r\\n    ////////////////////////////////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve the root owner of the given token.\\r\\n     * @dev Root owner is always the externally owned account.\\r\\n     * @dev If the given token is owned by another token, it will recursively query the parent tokens until reaching the\\r\\n     *  root owner.\\r\\n     * @param tokenId ID of the token for which the root owner is being retrieved\\r\\n     * @return address Address of the root owner of the given token\\r\\n     */\\r\\n    function ownerOf(\\r\\n        uint256 tokenId\\r\\n    )\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(IERC6059, IERC721Upgradeable)\\r\\n    returns (address)\\r\\n    {\\r\\n        (address owner, uint256 ownerTokenId, bool isNft) = directOwnerOf(\\r\\n            tokenId\\r\\n        );\\r\\n        if (isNft) {\\r\\n            owner = IERC6059(owner).ownerOf(ownerTokenId);\\r\\n        }\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve the immediate owner of the given token.\\r\\n     * @dev In the event the NFT is owned by an externally owned account, `tokenId` will be `0`.\\r\\n     * @param tokenId ID of the token for which the immediate owner is being retrieved\\r\\n     * @return address Address of the immediate owner. If the token is owned by an externally owned account, its address\\r\\n     *  will be returned. If the token is owned by another token, the parent token's collection smart contract address\\r\\n     *  is returned\\r\\n     * @return uint256 Token ID of the immediate owner. If the immediate owner is an externally owned account, the value\\r\\n     *  should be `0`\\r\\n     * @return bool A boolean value signifying whether the immediate owner is a token (`true`) or not (`false`)\\r\\n     */\\r\\n    function directOwnerOf(\\r\\n        uint256 tokenId\\r\\n    ) public view virtual returns (address, uint256, bool) {\\r\\n        DirectOwner memory owner = _directOwners[tokenId];\\r\\n        if (owner.ownerAddress == address(0)) revert ERC721InvalidTokenId();\\r\\n\\r\\n        return (owner.ownerAddress, owner.tokenId, owner.tokenId != 0);\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////\\r\\n    //              BURNING\\r\\n    ////////////////////////////////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Used to burn a given token.\\r\\n     * @param tokenId ID of the token to burn\\r\\n     */\\r\\n    function burn(uint256 tokenId) public virtual {\\r\\n        burn(tokenId, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to burn a token.\\r\\n     * @dev When a token is burned, its children are recursively burned as well.\\r\\n     * @dev The approvals are cleared when the token is burned.\\r\\n     * @dev Requirements:\\r\\n     *\\r\\n     *  - `tokenId` must exist.\\r\\n     * @dev Emits a {Transfer} event.\\r\\n     * @param tokenId ID of the token to burn\\r\\n     * @param maxChildrenBurns Maximum children to recursively burn\\r\\n     * @return uint256 The number of recursive burns it took to burn all of the children\\r\\n     */\\r\\n    function burn(\\r\\n        uint256 tokenId,\\r\\n        uint256 maxChildrenBurns\\r\\n    ) public virtual onlyApprovedOrDirectOwner(tokenId) returns (uint256) {\\r\\n        return _burn(tokenId, maxChildrenBurns);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to burn a token.\\r\\n     * @dev When a token is burned, its children are recursively burned as well.\\r\\n     * @dev The approvals are cleared when the token is burned.\\r\\n     * @dev Requirements:\\r\\n     *\\r\\n     *  - `tokenId` must exist.\\r\\n     * @dev Emits a {Transfer} event.\\r\\n     * @dev Emits a {NestTransfer} event.\\r\\n     * @param tokenId ID of the token to burn\\r\\n     * @param maxChildrenBurns Maximum children to recursively burn\\r\\n     * @return uint256 The number of recursive burns it took to burn all of the children\\r\\n     */\\r\\n    function _burn(\\r\\n        uint256 tokenId,\\r\\n        uint256 maxChildrenBurns\\r\\n    ) internal virtual returns (uint256) {\\r\\n        (address immediateOwner, uint256 parentId,) = directOwnerOf(tokenId);\\r\\n        address owner = ownerOf(tokenId);\\r\\n        _balances[immediateOwner] -= 1;\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n        _beforeNestedTokenTransfer(\\r\\n            immediateOwner,\\r\\n            address(0),\\r\\n            parentId,\\r\\n            0,\\r\\n            tokenId\\r\\n        );\\r\\n\\r\\n        _approve(address(0), tokenId);\\r\\n        _cleanApprovals(tokenId);\\r\\n\\r\\n        Child[] memory children = childrenOf(tokenId);\\r\\n\\r\\n        delete _activeChildren[tokenId];\\r\\n        delete _pendingChildren[tokenId];\\r\\n        delete _tokenApprovals[tokenId][owner];\\r\\n\\r\\n        uint256 pendingRecursiveBurns;\\r\\n        uint256 totalChildBurns;\\r\\n\\r\\n        uint256 length = children.length;\\r\\n        //gas savings\\r\\n        for (uint256 i; i < length;) {\\r\\n            if (totalChildBurns >= maxChildrenBurns)\\r\\n                revert MaxRecursiveBurnsReached(\\r\\n                    children[i].contractAddress,\\r\\n                    children[i].tokenId\\r\\n                );\\r\\n            delete _childIsInActive[children[i].contractAddress][\\r\\n            children[i].tokenId\\r\\n            ];\\r\\n        unchecked {\\r\\n            // At this point we know pendingRecursiveBurns must be at least 1\\r\\n            pendingRecursiveBurns = maxChildrenBurns - totalChildBurns;\\r\\n        }\\r\\n            // We substract one to the next level to count for the token being burned, then add it again on returns\\r\\n            // This is to allow the behavior of 0 recursive burns meaning only the current token is deleted.\\r\\n            totalChildBurns +=\\r\\n            IERC6059(children[i].contractAddress).burn(\\r\\n                children[i].tokenId,\\r\\n                pendingRecursiveBurns - 1\\r\\n            ) +\\r\\n            1;\\r\\n        unchecked {\\r\\n            ++i;\\r\\n        }\\r\\n        }\\r\\n        // Can't remove before burning child since child will call back to get root owner\\r\\n        delete _directOwners[tokenId];\\r\\n\\r\\n        _afterTokenTransfer(owner, address(0), tokenId);\\r\\n        _afterNestedTokenTransfer(\\r\\n            immediateOwner,\\r\\n            address(0),\\r\\n            parentId,\\r\\n            0,\\r\\n            tokenId\\r\\n        );\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n        emit NestTransfer(immediateOwner, address(0), parentId, 0, tokenId);\\r\\n\\r\\n        return totalChildBurns;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////\\r\\n    //              APPROVALS\\r\\n    ////////////////////////////////////////\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC721Upgradeable\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        if (to == owner) revert ERC721ApprovalToCurrentOwner();\\r\\n\\r\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender()))\\r\\n            revert ERC721ApproveCallerIsNotOwnerNorApprovedForAll();\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC721Upgradeable\\r\\n     */\\r\\n    function getApproved(\\r\\n        uint256 tokenId\\r\\n    ) public view virtual returns (address) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        return _tokenApprovals[tokenId][ownerOf(tokenId)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC721Upgradeable\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\r\\n        if (_msgSender() == operator) revert ERC721ApproveToCaller();\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC721Upgradeable\\r\\n     */\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    ) public view virtual returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to grant an approval to manage a given token.\\r\\n     * @dev Emits an {Approval} event.\\r\\n     * @param to Address to which the approval is being granted\\r\\n     * @param tokenId ID of the token for which the approval is being granted\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        _tokenApprovals[tokenId][owner] = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to update the owner of the token and clear the approvals associated with the previous owner.\\r\\n     * @dev The `destinationId` should equal `0` if the new owner is an externally owned account.\\r\\n     * @param tokenId ID of the token being updated\\r\\n     * @param destinationId ID of the token to receive the given token\\r\\n     * @param to Address of account to receive the token\\r\\n     */\\r\\n    function _updateOwnerAndClearApprovals(\\r\\n        uint256 tokenId,\\r\\n        uint256 destinationId,\\r\\n        address to\\r\\n    ) internal {\\r\\n        _directOwners[tokenId] = DirectOwner({\\r\\n            ownerAddress: to,\\r\\n            tokenId: destinationId\\r\\n        });\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n        _cleanApprovals(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to remove approvals for the current owner of the given token.\\r\\n     * @param tokenId ID of the token to clear the approvals for\\r\\n     */\\r\\n    function _cleanApprovals(uint256 tokenId) internal virtual {}\\r\\n\\r\\n    ////////////////////////////////////////\\r\\n    //              UTILS\\r\\n    ////////////////////////////////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Used to check whether the given account is allowed to manage the given token.\\r\\n     * @dev Requirements:\\r\\n     *\\r\\n     *  - `tokenId` must exist.\\r\\n     * @param spender Address that is being checked for approval\\r\\n     * @param tokenId ID of the token being checked\\r\\n     * @return bool The boolean value indicating whether the `spender` is approved to manage the given token\\r\\n     */\\r\\n    function _isApprovedOrOwner(\\r\\n        address spender,\\r\\n        uint256 tokenId\\r\\n    ) internal view virtual returns (bool) {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        return (spender == owner ||\\r\\n        isApprovedForAll(owner, spender) ||\\r\\n        getApproved(tokenId) == spender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to check whether the account is approved to manage the token or its direct owner.\\r\\n     * @param spender Address that is being checked for approval or direct ownership\\r\\n     * @param tokenId ID of the token being checked\\r\\n     * @return bool The boolean value indicating whether the `spender` is approved to manage the given token or its\\r\\n     *  direct owner\\r\\n     */\\r\\n    function _isApprovedOrDirectOwner(\\r\\n        address spender,\\r\\n        uint256 tokenId\\r\\n    ) internal view virtual returns (bool) {\\r\\n        (address owner, uint256 parentId,) = directOwnerOf(tokenId);\\r\\n        // When the parent is an NFT, only it can do operations\\r\\n        if (parentId != 0) {\\r\\n            return (spender == owner);\\r\\n        }\\r\\n        // Otherwise, the owner or approved address can\\r\\n        return (spender == owner ||\\r\\n        isApprovedForAll(owner, spender) ||\\r\\n        getApproved(tokenId) == spender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to enforce that the given token has been minted.\\r\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\r\\n     * @dev The validation checks whether the owner of a given token is a `0x0` address and considers it not minted if\\r\\n     *  it is. This means that both tokens that haven't been minted yet as well as the ones that have already been\\r\\n     *  burned will cause the transaction to be reverted.\\r\\n     * @param tokenId ID of the token to check\\r\\n     */\\r\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\r\\n        if (!_exists(tokenId)) revert ERC721InvalidTokenId();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to check whether the given token exists.\\r\\n     * @dev Tokens start existing when they are minted (`_mint`) and stop existing when they are burned (`_burn`).\\r\\n     * @param tokenId ID of the token being checked\\r\\n     * @return bool The boolean value signifying whether the token exists\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _directOwners[tokenId].ownerAddress != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * @dev The call is not executed if the target address is not a contract.\\r\\n     * @param from Address representing the previous owner of the given token\\r\\n     * @param to Yarget address that will receive the tokens\\r\\n     * @param tokenId ID of the token to be transferred\\r\\n     * @param data Optional data to send along with the call\\r\\n     * @return bool Boolean value signifying whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try\\r\\n            IERC721Receiver(to).onERC721Received(\\r\\n                _msgSender(),\\r\\n                from,\\r\\n                tokenId,\\r\\n                data\\r\\n            )\\r\\n            returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert ERC721TransferToNonReceiverImplementer();\\r\\n                } else {\\r\\n                    /// @solidity memory-safe-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////\\r\\n    //      CHILD MANAGEMENT PUBLIC\\r\\n    ////////////////////////////////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Used to add a child token to a given parent token.\\r\\n     * @dev This adds the iichild token into the given parent token's pending child tokens array.\\r\\n     * @dev You MUST NOT call this method directly. To add a a child to an NFT you must use either\\r\\n     *  `nestTransfer`, `nestMint` or `transferChild` to the NFT.\\r\\n     * @dev Requirements:\\r\\n     *\\r\\n     *  - `ownerOf` on the child contract must resolve to the called contract.\\r\\n     *  - The pending array of the parent contract must not be full.\\r\\n     * @param parentId ID of the parent token to receive the new child token\\r\\n     * @param childId ID of the new proposed child token\\r\\n     * @param data Additional data with no specified format\\r\\n     */\\r\\n    function addChild(\\r\\n        uint256 parentId,\\r\\n        uint256 childId,\\r\\n        bytes memory data\\r\\n    ) public virtual {\\r\\n        _requireMinted(parentId);\\r\\n\\r\\n        address childAddress = _msgSender();\\r\\n        if (!childAddress.isContract()) revert IsNotContract();\\r\\n\\r\\n        Child memory child = Child({\\r\\n            contractAddress: childAddress,\\r\\n            tokenId: childId\\r\\n        });\\r\\n\\r\\n        _beforeAddChild(parentId, childAddress, childId);\\r\\n\\r\\n        uint256 length = pendingChildrenOf(parentId).length;\\r\\n\\r\\n        if (length < 128) {\\r\\n            _pendingChildren[parentId].push(child);\\r\\n        } else {\\r\\n            revert MaxPendingChildrenReached();\\r\\n        }\\r\\n\\r\\n        // Previous length matches the index for the new child\\r\\n        emit ChildProposed(parentId, length, childAddress, childId);\\r\\n\\r\\n        _afterAddChild(parentId, childAddress, childId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice @notice Used to accept a pending child token for a given parent token.\\r\\n     * @dev This moves the child token from parent token's pending child tokens array into the active child tokens\\r\\n     *  array.\\r\\n     * @param parentId ID of the parent token for which the child token is being accepted\\r\\n     * @param childIndex Index of a child tokem in the given parent's pending children array\\r\\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\\r\\n     *  specified index of the given parent token's pending children array\\r\\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\\r\\n     *  pending children array\\r\\n     */\\r\\n    function acceptChild(\\r\\n        uint256 parentId,\\r\\n        uint256 childIndex,\\r\\n        address childAddress,\\r\\n        uint256 childId\\r\\n    ) public virtual onlyApprovedOrOwner(parentId) {\\r\\n        _acceptChild(parentId, childIndex, childAddress, childId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to accept a pending child token for a given parent token.\\r\\n     * @dev This moves the child token from parent token's pending child tokens array into the active child tokens\\r\\n     *  array.\\r\\n     * @dev Requirements:\\r\\n     *\\r\\n     *  - `tokenId` must exist\\r\\n     *  - `index` must be in range of the pending children array\\r\\n     * @param parentId ID of the parent token for which the child token is being accepted\\r\\n     * @param childIndex Index of a child tokem in the given parent's pending children array\\r\\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\\r\\n     *  specified index of the given parent token's pending children array\\r\\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\\r\\n     *  pending children array\\r\\n     */\\r\\n    function _acceptChild(\\r\\n        uint256 parentId,\\r\\n        uint256 childIndex,\\r\\n        address childAddress,\\r\\n        uint256 childId\\r\\n    ) internal virtual {\\r\\n        if (pendingChildrenOf(parentId).length <= childIndex)\\r\\n            revert PendingChildIndexOutOfRange();\\r\\n\\r\\n        Child memory child = pendingChildOf(parentId, childIndex);\\r\\n        _checkExpectedChild(child, childAddress, childId);\\r\\n        if (_childIsInActive[childAddress][childId] != 0)\\r\\n            revert ChildAlreadyExists();\\r\\n\\r\\n        _beforeAcceptChild(parentId, childIndex, childAddress, childId);\\r\\n\\r\\n        // Remove from pending:\\r\\n        _removeChildByIndex(_pendingChildren[parentId], childIndex);\\r\\n\\r\\n        // Add to active:\\r\\n        _activeChildren[parentId].push(child);\\r\\n        _childIsInActive[childAddress][childId] = 1;\\r\\n        // We use 1 as true\\r\\n\\r\\n        emit ChildAccepted(parentId, childIndex, childAddress, childId);\\r\\n\\r\\n        _afterAcceptChild(parentId, childIndex, childAddress, childId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to reject all pending children of a given parent token.\\r\\n     * @dev Removes the children from the pending array mapping.\\r\\n     * @dev This does not update the ownership storage data on children. If necessary, ownership can be reclaimed by the\\r\\n     *  rootOwner of the previous parent.\\r\\n     * @param tokenId ID of the parent token for which to reject all of the pending tokens\\r\\n     */\\r\\n    function rejectAllChildren(\\r\\n        uint256 tokenId,\\r\\n        uint256 maxRejections\\r\\n    ) public virtual onlyApprovedOrOwner(tokenId) {\\r\\n        _rejectAllChildren(tokenId, maxRejections);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to reject all pending children of a given parent token.\\r\\n     * @dev Removes the children from the pending array mapping.\\r\\n     * @dev This does not update the ownership storage data on children. If necessary, ownership can be reclaimed by the\\r\\n     *  rootOwner of the previous parent.\\r\\n     * @dev Requirements:\\r\\n     *\\r\\n     *  - `tokenId` must exist\\r\\n     * @param tokenId ID of the parent token for which to reject all of the pending tokens.\\r\\n     * @param maxRejections Maximum number of expected children to reject, used to prevent from\\r\\n     *  rejecting children which arrive just before this operation.\\r\\n     */\\r\\n    function _rejectAllChildren(\\r\\n        uint256 tokenId,\\r\\n        uint256 maxRejections\\r\\n    ) internal virtual {\\r\\n        if (_pendingChildren[tokenId].length > maxRejections)\\r\\n            revert UnexpectedNumberOfChildren();\\r\\n\\r\\n        _beforeRejectAllChildren(tokenId);\\r\\n        delete _pendingChildren[tokenId];\\r\\n        emit AllChildrenRejected(tokenId);\\r\\n        _afterRejectAllChildren(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to transfer a child token from a given parent token.\\r\\n     * @param tokenId ID of the parent token from which the child token is being transferred\\r\\n     * @param to Address to which to transfer the token to\\r\\n     * @param destinationId ID of the token to receive this child token (MUST be 0 if the destination is not a token)\\r\\n     * @param childIndex Index of a token we are transferring, in the array it belongs to (can be either active array or\\r\\n     *  pending array)\\r\\n     * @param childAddress Address of the child token's collection smart contract.\\r\\n     * @param childId ID of the child token in its own collection smart contract.\\r\\n     * @param isPending A boolean value indicating whether the child token being transferred is in the pending array of the\\r\\n     *  parent token (`true`) or in the active array (`false`)\\r\\n     * @param data Additional data with no specified format, sent in call to `_to`\\r\\n     */\\r\\n    function transferChild(\\r\\n        uint256 tokenId,\\r\\n        address to,\\r\\n        uint256 destinationId,\\r\\n        uint256 childIndex,\\r\\n        address childAddress,\\r\\n        uint256 childId,\\r\\n        bool isPending,\\r\\n        bytes memory data\\r\\n    ) public virtual onlyApprovedOrOwner(tokenId) {\\r\\n        _transferChild(\\r\\n            tokenId,\\r\\n            to,\\r\\n            destinationId,\\r\\n            childIndex,\\r\\n            childAddress,\\r\\n            childId,\\r\\n            isPending,\\r\\n            data\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to transfer a child token from a given parent token.\\r\\n     * @dev When transferring a child token, the owner of the token is set to `to`, or is not updated in the event of `to`\\r\\n     *  being the `0x0` address.\\r\\n     * @dev Requirements:\\r\\n     *\\r\\n     *  - `tokenId` must exist.\\r\\n     * @dev Emits {ChildTransferred} event.\\r\\n     * @param tokenId ID of the parent token from which the child token is being transferred\\r\\n     * @param to Address to which to transfer the token to\\r\\n     * @param destinationId ID of the token to receive this child token (MUST be 0 if the destination is not a token)\\r\\n     * @param childIndex Index of a token we are transferring, in the array it belongs to (can be either active array or\\r\\n     *  pending array)\\r\\n     * @param childAddress Address of the child token's collection smart contract.\\r\\n     * @param childId ID of the child token in its own collection smart contract.\\r\\n     * @param isPending A boolean value indicating whether the child token being transferred is in the pending array of the\\r\\n     *  parent token (`true`) or in the active array (`false`)\\r\\n     * @param data Additional data with no specified format, sent in call to `_to`\\r\\n     */\\r\\n    function _transferChild(\\r\\n        uint256 tokenId,\\r\\n        address to,\\r\\n        uint256 destinationId, // newParentId\\r\\n        uint256 childIndex,\\r\\n        address childAddress,\\r\\n        uint256 childId,\\r\\n        bool isPending,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        Child memory child;\\r\\n        if (isPending) {\\r\\n            child = pendingChildOf(tokenId, childIndex);\\r\\n        } else {\\r\\n            child = childOf(tokenId, childIndex);\\r\\n        }\\r\\n        _checkExpectedChild(child, childAddress, childId);\\r\\n\\r\\n        _beforeTransferChild(\\r\\n            tokenId,\\r\\n            childIndex,\\r\\n            childAddress,\\r\\n            childId,\\r\\n            isPending\\r\\n        );\\r\\n\\r\\n        if (isPending) {\\r\\n            _removeChildByIndex(_pendingChildren[tokenId], childIndex);\\r\\n        } else {\\r\\n            delete _childIsInActive[childAddress][childId];\\r\\n            _removeChildByIndex(_activeChildren[tokenId], childIndex);\\r\\n        }\\r\\n\\r\\n        if (to != address(0)) {\\r\\n            if (destinationId == 0) {\\r\\n                IERC721(childAddress).safeTransferFrom(\\r\\n                    address(this),\\r\\n                    to,\\r\\n                    childId,\\r\\n                    data\\r\\n                );\\r\\n            } else {\\r\\n                // Destination is an NFT\\r\\n                IERC6059(child.contractAddress).nestTransferFrom(\\r\\n                    address(this),\\r\\n                    to,\\r\\n                    child.tokenId,\\r\\n                    destinationId,\\r\\n                    data\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit ChildTransferred(\\r\\n            tokenId,\\r\\n            childIndex,\\r\\n            childAddress,\\r\\n            childId,\\r\\n            isPending\\r\\n        );\\r\\n        _afterTransferChild(\\r\\n            tokenId,\\r\\n            childIndex,\\r\\n            childAddress,\\r\\n            childId,\\r\\n            isPending\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _checkExpectedChild(\\r\\n        Child memory child,\\r\\n        address expectedAddress,\\r\\n        uint256 expectedId\\r\\n    ) private pure {\\r\\n        if (\\r\\n            expectedAddress != child.contractAddress ||\\r\\n            expectedId != child.tokenId\\r\\n        ) revert UnexpectedChildId();\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////\\r\\n    //      CHILD MANAGEMENT GETTERS\\r\\n    ////////////////////////////////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve the active child tokens of a given parent token.\\r\\n     * @dev Returns array of Child structs existing for parent token.\\r\\n     * @dev The Child struct consists of the following values:\\r\\n     *  [\\r\\n     *      tokenId,\\r\\n     *      contractAddress\\r\\n     *  ]\\r\\n     * @param parentId ID of the parent token for which to retrieve the active child tokens\\r\\n     * @return struct[] An array of Child structs containing the parent token's active child tokens\\r\\n     */\\r\\n\\r\\n    function childrenOf(\\r\\n        uint256 parentId\\r\\n    ) public view virtual returns (Child[] memory) {\\r\\n        Child[] memory children = _activeChildren[parentId];\\r\\n        return children;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve the pending child tokens of a given parent token.\\r\\n     * @dev Returns array of pending Child structs existing for given parent.\\r\\n     * @dev The Child struct consists of the following values:\\r\\n     *  [\\r\\n     *      tokenId,\\r\\n     *      contractAddress\\r\\n     *  ]\\r\\n     * @param parentId ID of the parent token for which to retrieve the pending child tokens\\r\\n     * @return struct[] An array of Child structs containing the parent token's pending child tokens\\r\\n     */\\r\\n\\r\\n    function pendingChildrenOf(\\r\\n        uint256 parentId\\r\\n    ) public view virtual returns (Child[] memory) {\\r\\n        Child[] memory pendingChildren = _pendingChildren[parentId];\\r\\n        return pendingChildren;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve a specific active child token for a given parent token.\\r\\n     * @dev Returns a single Child struct locating at `index` of parent token's active child tokens array.\\r\\n     * @dev The Child struct consists of the following values:\\r\\n     *  [\\r\\n     *      tokenId,\\r\\n     *      contractAddress\\r\\n     *  ]\\r\\n     * @param parentId ID of the parent token for which the child is being retrieved\\r\\n     * @param index Index of the child token in the parent token's active child tokens array\\r\\n     * @return struct A Child struct containing data about the specified child\\r\\n     */\\r\\n    function childOf(\\r\\n        uint256 parentId,\\r\\n        uint256 index\\r\\n    ) public view virtual returns (Child memory) {\\r\\n        if (childrenOf(parentId).length <= index) revert ChildIndexOutOfRange();\\r\\n        Child memory child = _activeChildren[parentId][index];\\r\\n        return child;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to retrieve a specific pending child token from a given parent token.\\r\\n     * @dev Returns a single Child struct locating at `index` of parent token's active child tokens array.\\r\\n     * @dev The Child struct consists of the following values:\\r\\n     *  [\\r\\n     *      tokenId,\\r\\n     *      contractAddress\\r\\n     *  ]\\r\\n     * @param parentId ID of the parent token for which the pending child token is being retrieved\\r\\n     * @param index Index of the child token in the parent token's pending child tokens array\\r\\n     * @return struct A Child struct containting data about the specified child\\r\\n     */\\r\\n    function pendingChildOf(\\r\\n        uint256 parentId,\\r\\n        uint256 index\\r\\n    ) public view virtual returns (Child memory) {\\r\\n        if (pendingChildrenOf(parentId).length <= index)\\r\\n            revert PendingChildIndexOutOfRange();\\r\\n        Child memory child = _pendingChildren[parentId][index];\\r\\n        return child;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to verify that the given child tokwn is included in an active array of a token.\\r\\n     * @param childAddress Address of the given token's collection smart contract\\r\\n     * @param childId ID of the child token being checked\\r\\n     * @return bool A boolean value signifying whether the given child token is included in an active child tokens array\\r\\n     *  of a token (`true`) or not (`false`)\\r\\n     */\\r\\n    function childIsInActive(\\r\\n        address childAddress,\\r\\n        uint256 childId\\r\\n    ) public view virtual returns (bool) {\\r\\n        return _childIsInActive[childAddress][childId] != 0;\\r\\n    }\\r\\n\\r\\n    // HOOKS\\r\\n\\r\\n    /**\\r\\n     * @notice Hook that is called before any token transfer. This includes minting and burning.\\r\\n     * @dev Calling conditions:\\r\\n     *\\r\\n     *  - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be transferred to `to`.\\r\\n     *  - When `from` is zero, `tokenId` will be minted to `to`.\\r\\n     *  - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     *  - `from` and `to` are never zero at the same time.\\r\\n     *\\r\\n     *  To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     * @param from Address from which the token is being transferred\\r\\n     * @param to Address to which the token is being transferred\\r\\n     * @param tokenId ID of the token being transferred\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @notice Hook that is called after any transfer of tokens. This includes minting and burning.\\r\\n     * @dev Calling conditions:\\r\\n     *\\r\\n     *  - When `from` and `to` are both non-zero.\\r\\n     *  - `from` and `to` are never zero at the same time.\\r\\n     *\\r\\n     *  To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     * @param from Address from which the token has been transferred\\r\\n     * @param to Address to which the token has been transferred\\r\\n     * @param tokenId ID of the token that has been transferred\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @notice Hook that is called before nested token transfer.\\r\\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     * @param from Address from which the token is being transferred\\r\\n     * @param to Address to which the token is being transferred\\r\\n     * @param fromTokenId ID of the token from which the given token is being transferred\\r\\n     * @param toTokenId ID of the token to which the given token is being transferred\\r\\n     * @param tokenId ID of the token being transferred\\r\\n     */\\r\\n    function _beforeNestedTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 fromTokenId,\\r\\n        uint256 toTokenId,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @notice Hook that is called after nested token transfer.\\r\\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     * @param from Address from which the token was transferred\\r\\n     * @param to Address to which the token was transferred\\r\\n     * @param fromTokenId ID of the token from which the given token was transferred\\r\\n     * @param toTokenId ID of the token to which the given token was transferred\\r\\n     * @param tokenId ID of the token that was transferred\\r\\n     */\\r\\n    function _afterNestedTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 fromTokenId,\\r\\n        uint256 toTokenId,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @notice Hook that is called before a child is added to the pending tokens array of a given token.\\r\\n     * @dev The Child struct consists of the following values:\\r\\n     *  [\\r\\n     *      tokenId,\\r\\n     *      contractAddress\\r\\n     *  ]\\r\\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     * @param tokenId ID of the token that will receive a new pending child token\\r\\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\\r\\n     *  specified index of the given parent token's pending children array\\r\\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\\r\\n     *  pending children array\\r\\n     */\\r\\n    function _beforeAddChild(\\r\\n        uint256 tokenId,\\r\\n        address childAddress,\\r\\n        uint256 childId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @notice Hook that is called after a child is added to the pending tokens array of a given token.\\r\\n     * @dev The Child struct consists of the following values:\\r\\n     *  [\\r\\n     *      tokenId,\\r\\n     *      contractAddress\\r\\n     *  ]\\r\\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     * @param tokenId ID of the token that has received a new pending child token\\r\\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\\r\\n     *  specified index of the given parent token's pending children array\\r\\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\\r\\n     *  pending children array\\r\\n     */\\r\\n    function _afterAddChild(\\r\\n        uint256 tokenId,\\r\\n        address childAddress,\\r\\n        uint256 childId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @notice Hook that is called before a child is accepted to the active tokens array of a given token.\\r\\n     * @dev The Child struct consists of the following values:\\r\\n     *  [\\r\\n     *      tokenId,\\r\\n     *      contractAddress\\r\\n     *  ]\\r\\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     * @param parentId ID of the token that will accept a pending child token\\r\\n     * @param childIndex Index of the child token to accept in the given parent token's pending children array\\r\\n     * @param childAddress Address of the collection smart contract of the child token expected to be located at the\\r\\n     *  specified index of the given parent token's pending children array\\r\\n     * @param childId ID of the child token expected to be located at the specified index of the given parent token's\\r\\n     *  pending children array\\r\\n     */\\r\\n    function _beforeAcceptChild(\\r\\n        uint256 parentId,\\r\\n        uint256 childIndex,\\r\\n        address childAddress,\\r\\n        uint256 childId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @notice Hook that is called after a child is accepted to the active tokens array of a given token.\\r\\n     * @dev The Child struct consists of the following values:\\r\\n     *  [\\r\\n     *      tokenId,\\r\\n     *      contractAddress\\r\\n     *  ]\\r\\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     * @param parentId ID of the token that has accepted a pending child token\\r\\n     * @param childIndex Index of the child token that was accpeted in the given parent token's pending children array\\r\\n     * @param childAddress Address of the collection smart contract of the child token that was expected to be located\\r\\n     *  at the specified index of the given parent token's pending children array\\r\\n     * @param childId ID of the child token that was expected to be located at the specified index of the given parent\\r\\n     *  token's pending children array\\r\\n     */\\r\\n    function _afterAcceptChild(\\r\\n        uint256 parentId,\\r\\n        uint256 childIndex,\\r\\n        address childAddress,\\r\\n        uint256 childId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @notice Hook that is called before a child is transferred from a given child token array of a given token.\\r\\n     * @dev The Child struct consists of the following values:\\r\\n     *  [\\r\\n     *      tokenId,\\r\\n     *      contractAddress\\r\\n     *  ]\\r\\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     * @param tokenId ID of the token that will transfer a child token\\r\\n     * @param childIndex Index of the child token that will be transferred from the given parent token's children array\\r\\n     * @param childAddress Address of the collection smart contract of the child token that is expected to be located\\r\\n     *  at the specified index of the given parent token's children array\\r\\n     * @param childId ID of the child token that is expected to be located at the specified index of the given parent\\r\\n     *  token's children array\\r\\n     * @param isPending A boolean value signifying whether the child token is being transferred from the pending child\\r\\n     *  tokens array (`true`) or from the active child tokens array (`false`)\\r\\n     */\\r\\n    function _beforeTransferChild(\\r\\n        uint256 tokenId,\\r\\n        uint256 childIndex,\\r\\n        address childAddress,\\r\\n        uint256 childId,\\r\\n        bool isPending\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @notice Hook that is called after a child is transferred from a given child token array of a given token.\\r\\n     * @dev The Child struct consists of the following values:\\r\\n     *  [\\r\\n     *      tokenId,\\r\\n     *      contractAddress\\r\\n     *  ]\\r\\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     * @param tokenId ID of the token that has transferred a child token\\r\\n     * @param childIndex Index of the child token that was transferred from the given parent token's children array\\r\\n     * @param childAddress Address of the collection smart contract of the child token that was expected to be located\\r\\n     *  at the specified index of the given parent token's children array\\r\\n     * @param childId ID of the child token that was expected to be located at the specified index of the given parent\\r\\n     *  token's children array\\r\\n     * @param isPending A boolean value signifying whether the child token was transferred from the pending child tokens\\r\\n     *  array (`true`) or from the active child tokens array (`false`)\\r\\n     */\\r\\n    function _afterTransferChild(\\r\\n        uint256 tokenId,\\r\\n        uint256 childIndex,\\r\\n        address childAddress,\\r\\n        uint256 childId,\\r\\n        bool isPending\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @notice Hook that is called before a pending child tokens array of a given token is cleared.\\r\\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     * @param tokenId ID of the token that will reject all of the pending child tokens\\r\\n     */\\r\\n    function _beforeRejectAllChildren(uint256 tokenId) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @notice Hook that is called after a pending child tokens array of a given token is cleared.\\r\\n     * @dev To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     * @param tokenId ID of the token that has rejected all of the pending child tokens\\r\\n     */\\r\\n    function _afterRejectAllChildren(uint256 tokenId) internal virtual {}\\r\\n\\r\\n    // HELPERS\\r\\n\\r\\n    /**\\r\\n     * @notice Used to remove a specified child token form an array using its index within said array.\\r\\n     * @dev The caller must ensure that the length of the array is valid compared to the index passed.\\r\\n     * @dev The Child struct consists of the following values:\\r\\n     *  [\\r\\n     *      tokenId,\\r\\n     *      contractAddress\\r\\n     *  ]\\r\\n     * @param array An array od Child struct containing info about the child tokens in a given child tokens array\\r\\n     * @param index An index of the child token to remove in the accompanying array\\r\\n     */\\r\\n    function _removeChildByIndex(Child[] storage array, uint256 index) private {\\r\\n        array[index] = array[array.length - 1];\\r\\n        array.pop();\\r\\n    }\\r\\n\\r\\n\\r\\n    uint256[35] private __gap;\\r\\n\\r\\n}\\r\\n\\r\\ncontract ProxiedMEP1002Token is Proxied, UUPSUpgradeable, MEP1002Token {\\r\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\r\\n}\",\"keccak256\":\"0x21ac4a5f7fd6e7bce8e83fba80a3fbb2d3a68de6197ba6dc04c367759335f09f\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103135760003560e01c80635d79343d1161019a578063a868ec85116100e1578063defa80c31161008a578063e985e9c511610064578063e985e9c51461095e578063f2fde38b146109a7578063fb25fb7a146109c757600080fd5b8063defa80c3146108fe578063e0dba60f1461091e578063e97ceaa81461093e57600080fd5b8063b88d4fde116100bb578063b88d4fde1461088e578063c87b56dd146108ae578063da8c229e146108ce57600080fd5b8063a868ec851461082e578063a898e3641461084e578063b390c0ab1461086e57600080fd5b80638da5cb5b11610143578063a00e76dd1161011d578063a00e76dd146107ce578063a0712d68146107ee578063a22cb4651461080e57600080fd5b80638da5cb5b1461077b57806395d89b411461079957806397961336146107ae57600080fd5b80636f19951c116101745780636f19951c1461072657806370a0823114610746578063715018a61461076657600080fd5b80635d79343d146106d15780636352211e146106e6578063635490cc1461070657600080fd5b80632f745c591161025e57806344150775116102075780634f6ccce7116101e15780634f6ccce71461067c57806352d1902d1461069c57806355f804b3146106b157600080fd5b8063441507751461061c57806344ec93441461063c5780634f1ef2861461066957600080fd5b80634182e4a3116102385780634182e4a31461059757806342842e0e146105dc57806342966c68146105fc57600080fd5b80632f745c5914610537578063310495ab146105575780633659cfe61461057757600080fd5b8063150b7a02116102c057806323b872dd1161029a57806323b872dd146104ca5780632828adb2146104ea5780632f32f9371461050a57600080fd5b8063150b7a021461043657806317af13181461048757806318160ddd146104a757600080fd5b8063077f224a116102f1578063077f224a146103be578063081812fc146103de578063095ea7b31461041657600080fd5b806301ffc9a714610318578063064c0a3a1461034d57806306fdde031461036f575b600080fd5b34801561032457600080fd5b50610338610333366004614a1f565b610a0e565b60405190151581526020015b60405180910390f35b34801561035957600080fd5b5061036d610368366004614b2f565b610af3565b005b34801561037b57600080fd5b5060408051808201909152600f81527f4d4550313030322048657861676f6e000000000000000000000000000000000060208201525b6040516103449190614bf5565b3480156103ca57600080fd5b5061036d6103d9366004614c08565b610b12565b3480156103ea57600080fd5b506103fe6103f9366004614c80565b610ca6565b6040516001600160a01b039091168152602001610344565b34801561042257600080fd5b5061036d610431366004614c99565b610cec565b34801561044257600080fd5b50610456610451366004614cc5565b610daa565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610344565b34801561049357600080fd5b5061036d6104a2366004614d31565b610dd4565b3480156104b357600080fd5b506104bc610e88565b604051908152602001610344565b3480156104d657600080fd5b5061036d6104e5366004614d4e565b610e98565b3480156104f657600080fd5b5061036d610505366004614c80565b610ead565b34801561051657600080fd5b5061052a610525366004614d8f565b610ff6565b6040516103449190614db1565b34801561054357600080fd5b506104bc610552366004614c99565b6110a8565b34801561056357600080fd5b506103b1610572366004614c80565b611147565b34801561058357600080fd5b5061036d610592366004614d31565b6111e1565b3480156105a357600080fd5b506103386105b2366004614c99565b6001600160a01b0391909116600090815260d0602090815260408083209383529290522054151590565b3480156105e857600080fd5b5061036d6105f7366004614d4e565b61137e565b34801561060857600080fd5b5061036d610617366004614c80565b611399565b34801561062857600080fd5b5061036d610637366004614dd1565b6113a8565b34801561064857600080fd5b5061065c610657366004614c80565b6114c0565b6040516103449190614e21565b61036d610677366004614dd1565b61153f565b34801561068857600080fd5b506104bc610697366004614c80565b6116c9565b3480156106a857600080fd5b506104bc61174b565b3480156106bd57600080fd5b5061036d6106cc366004614e81565b611810565b3480156106dd57600080fd5b5061036d6118a1565b3480156106f257600080fd5b506103fe610701366004614c80565b611942565b34801561071257600080fd5b5061036d610721366004614eb6565b6119eb565b34801561073257600080fd5b5061065c610741366004614c80565b611b3c565b34801561075257600080fd5b506104bc610761366004614d31565b611bac565b34801561077257600080fd5b5061036d611c0a565b34801561078757600080fd5b506097546001600160a01b03166103fe565b3480156107a557600080fd5b506103b1611c1c565b3480156107ba57600080fd5b5061036d6107c9366004614d8f565b611cae565b3480156107da57600080fd5b506104bc6107e9366004614c80565b611cc2565b3480156107fa57600080fd5b5061036d610809366004614c80565b611ccd565b34801561081a57600080fd5b5061036d610829366004614f14565b611e96565b34801561083a57600080fd5b5061036d610849366004614d8f565b611f44565b34801561085a57600080fd5b5061052a610869366004614d8f565b612225565b34801561087a57600080fd5b506104bc610889366004614d8f565b61229b565b34801561089a57600080fd5b5061036d6108a9366004614cc5565b6122b1565b3480156108ba57600080fd5b506103b16108c9366004614c80565b6122ce565b3480156108da57600080fd5b506103386108e9366004614d31565b60c96020526000908152604090205460ff1681565b34801561090a57600080fd5b5061036d610919366004614f4d565b612345565b34801561092a57600080fd5b5061036d610939366004614f14565b61236a565b34801561094a57600080fd5b5061036d610959366004614fe9565b6123ca565b34801561096a57600080fd5b50610338610979366004615028565b6001600160a01b03918216600090815260cc6020908152604080832093909416825291909152205460ff1690565b3480156109b357600080fd5b5061036d6109c2366004614d31565b6123e0565b3480156109d357600080fd5b506109e76109e2366004614c80565b612490565b604080516001600160a01b0390941684526020840192909252151590820152606001610344565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480610aa157507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610aed57507fffffffff0000000000000000000000000000000000000000000000000000000082167f42b0e56f00000000000000000000000000000000000000000000000000000000145b92915050565b82610afd81612511565b610b0a8686868686612551565b505050505050565b600054610100900460ff1615808015610b325750600054600160ff909116105b80610b4c5750303b158015610b4c575060005460ff166001145b610bc35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610c0357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610c0b6118a1565b610c1584846127de565b60d6805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790558015610ca057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000610cb182612865565b600082815260cb6020526040812090610cc984611942565b6001600160a01b0390811682526020820192909252604001600020541692915050565b6000610cf782611942565b9050806001600160a01b0316836001600160a01b031603610d44576040517f0591db6d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614801590610d645750610d628133610979565b155b15610d9b576040517f982462b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610da583836128b6565b505050565b7f150b7a02000000000000000000000000000000000000000000000000000000005b949350505050565b33600090815260c9602052604090205460ff16610e595760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bba565b60d7805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000610e9360d45490565b905090565b80610ea281612511565b610ca084848461293c565b610eb681612865565b3360d6546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015610f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f419190615056565b6001600160a01b031614610f81576040517f507b884600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160208082018352600080835284815260d19091529190912090610fa8908261510c565b50807fd4878af30a4a4a71c10122662443bc90d3fe898ea245ce80d45bde68e3909a2960d16000848152602001908152602001600020604051610feb9190615208565b60405180910390a250565b60408051808201909152600080825260208201528161101484611b3c565b511161104c576040517fca755cc000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815260ce6020526040812080548490811061106c5761106c615293565b60009182526020918290206040805180820190915260029092020180548252600101546001600160a01b03169181019190915291505092915050565b60006110b383611bac565b82106111275760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610bba565b306001600160a01b0384160361113e575080610aed565b50600092915050565b60d1602052600090815260409020805461116090615073565b80601f016020809104026020016040519081016040528092919081815260200182805461118c90615073565b80156111d95780601f106111ae576101008083540402835291602001916111d9565b820191906000526020600020905b8154815290600101906020018083116111bc57829003601f168201915b505050505081565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361127f5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610bba565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112da7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146113565760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610bba565b61135f81612ad9565b6040805160008082526020820190925261137b91839190612ae1565b50565b610da5838383604051806020016040528060008152506122b1565b6113a481600061229b565b5050565b33600090815260c9602052604090205460ff1661142d5760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bba565b60d6805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f55f804b30000000000000000000000000000000000000000000000000000000081526355f804b390611492908490600401614bf5565b600060405180830381600087803b1580156114ac57600080fd5b505af1158015610b0a573d6000803e3d6000fd5b600081815260cf60209081526040808320805482518185028101850190935280835260609493849084015b828210156115335760008481526020908190206040805180820190915260028502909101805482526001908101546001600160a01b03168284015290835290920191016114eb565b50929695505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115dd5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152608401610bba565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116387f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146116b45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152608401610bba565b6116bd82612ad9565b6113a482826001612ae1565b60006116d3610e88565b82106117475760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610bba565b5090565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117eb5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610bba565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b33600090815260c9602052604090205460ff166118955760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f60448201527f6e74726f6c6c65720000000000000000000000000000000000000000000000006064820152608401610bba565b60d56113a4828261510c565b600054610100900460ff1661191e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bba565b33600090815260c960205260409020805460ff19166001179055611940612c81565b565b60008060008061195185612490565b92509250925080156119e2576040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03841690636352211e90602401602060405180830381865afa1580156119bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119df9190615056565b92505b50909392505050565b6119f483612865565b33803b611a2d576040517f80275d3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080518082019091528381526001600160a01b03821660208201526000611a54866114c0565b5190506080811015611ac057600086815260cf602090815260408220805460018082018355918452928290208551600290940201928355908401519101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055611af2565b6040517f98674b3500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84836001600160a01b0316877fe65085e689b77b126ba0bac3b079aa8288f19f4d5445af11c76003f8ab3075dd84604051611b2f91815260200190565b60405180910390a4610b0a565b600081815260ce602090815260408083208054825181850281018501909352808352606094938490840182156115335760008481526020908190206040805180820190915260028502909101805482526001908101546001600160a01b03168284015290835290920191016114eb565b60006001600160a01b038216611bee576040517f7772286600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b0316600090815260ca602052604090205490565b611c12612d06565b6119406000612d60565b606060d38054611c2b90615073565b80601f0160208091040260200160405190810160405280929190818152602001828054611c5790615073565b8015611ca45780601f10611c7957610100808354040283529160200191611ca4565b820191906000526020600020905b815481529060010190602001808311611c8757829003601f168201915b5050505050905090565b81611cb881612dbf565b610da58383612dff565b600061174782612865565b611cd681612e8d565b611d0c576040517f1fc5f61500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260cd60205260409020600101546001600160a01b031615611d5e576040517fc5a8d37100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611d6d8260341c600f1690565b905060078114611da9576040517f1fc5f61500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611db760d480546001019055565b611dc13083613004565b60d6546001600160a01b03166340c10f19336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260248101859052604401600060405180830381600087803b158015611e3357600080fd5b505af1158015611e47573d6000803e3d6000fd5b505050600083815260d160205260409081902090518492507fd4878af30a4a4a71c10122662443bc90d3fe898ea245ce80d45bde68e3909a2991611e8a91615208565b60405180910390a25050565b6001600160a01b0382163303611ed8576040517f2dee66e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600081815260cc602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611f4d82612865565b3360d6546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015611fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd89190615056565b6001600160a01b031614612018576040517f507b884600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360d7546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381865afa15801561207f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a39190615056565b6001600160a01b0316146120e3576040517f507b884600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60d7546040517f20c38e2b000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b0316906320c38e2b90602401600060405180830381865afa158015612146573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261216e91908101906152c2565b90506040516020016040516020818303038152906040528051906020012081805190602001200361219e57505050565b806040516020016121af9190615330565b60408051601f19818403018152918152600085815260d160205220906121d5908261510c565b50827fd4878af30a4a4a71c10122662443bc90d3fe898ea245ce80d45bde68e3909a2960d160008681526020019081526020016000206040516122189190615208565b60405180910390a2505050565b604080518082019091526000808252602082015281612243846114c0565b511161227b576040517f9136d24f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815260cf6020526040812080548490811061106c5761106c615293565b6000826122a781612511565b610dcc848461301e565b816122bb81612511565b6122c7858585856133b8565b5050505050565b60606122d982612865565b60006122e3613405565b90506000815111612303576040518060200160405280600081525061233e565b8061230d84613414565b600085815260d16020908152604091829020915161232e949392910161534c565b6040516020818303038152906040525b9392505050565b8761234f81612dbf565b61235f89898989898989896134d2565b505050505050505050565b612372612d06565b6001600160a01b038216600081815260c96020908152604091829020805460ff191685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf879101611e8a565b836123d481612dbf565b6122c7858585856136df565b6123e8612d06565b6001600160a01b0381166124645760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610bba565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035561137b81612d60565b600081815260cd60209081526040808320815180830190925280548252600101546001600160a01b031691810182905282918291906124fb576040517f89ba7e1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020810151905190959094508415159350915050565b61251b338261384d565b61137b576040517f35d12e3f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061255d85612490565b5091509150866001600160a01b0316826001600160a01b0316146125ad576040517fe146af6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0386166125ed576040517fe3d91bfc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0386163014801561260457508385145b1561263b576040517f5eeb0df000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0386163b61267c576040517f80275d3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f42b0e56f0000000000000000000000000000000000000000000000000000000060048201526001600160a01b038716906301ffc9a790602401602060405180830381865afa1580156126f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271d919061541b565b612753576040517ff413cf9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61275e8587866138f0565b6001600160a01b038716600090815260ca60205260408120805460019290612787908490615467565b909155506127989050858588613a13565b6001600160a01b038616600090815260ca602052604081208054600192906127c190849061547a565b909155506127d59050828783878988613a76565b50505050505050565b600054610100900460ff1661285b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bba565b6113a48282613b94565b600081815260cd60205260409020600101546001600160a01b031661137b576040517f89ba7e1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006128c182611942565b600083815260cb602090815260408083206001600160a01b0385811680865291909352818420805473ffffffffffffffffffffffffffffffffffffffff1916938916938417905590519394508593919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a4505050565b60008061294883612490565b5091509150846001600160a01b0316826001600160a01b031614612998576040517fe146af6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384166129d8576040517fe3d91bfc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516600090815260ca60205260408120805460019290612a01908490615467565b90915550612a13905083600086613a13565b6001600160a01b038416600090815260ca60205260408120805460019290612a3c90849061547a565b909155505060405183906001600160a01b0380871691908816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a482846001600160a01b0316836001600160a01b03167f04444026cefd1b05506559cab59d1b865ae3ba4ed2fe5c894f04e522776c552d846000604051612acc929190918252602082015260400190565b60405180910390a46122c7565b61137b612d06565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612b1457610da583613c2a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612b6e575060408051601f3d908101601f19168201909252612b6b9181019061548d565b60015b612be05760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608401610bba565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114612c755760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152608401610bba565b50610da5838383613cf5565b600054610100900460ff16612cfe5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bba565b611940613d1a565b6097546001600160a01b031633146119405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bba565b609780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612dc93382613da0565b61137b576040517f2728a9d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260cf6020526040902054811015612e47576040517f8ac3cb1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260cf60205260408120612e5e916149a1565b60405182907f8ac4a0d65950c3e40448afb2260e2e0ec36ea15644d9b39e37e85472e5f9445190600090a25050565b6000612e9c82603f1c60011690565b15612ea957506000919050565b6001612eb883603b1c600f1690565b14612ec557506000919050565b612ed28260381c60071690565b15612edf57506000919050565b6000612eee83602d1c607f1690565b9050607a811115612f025750600092915050565b6000612f118460341c600f1690565b90506007811080612f225750600f81115b15612f31575060009392505050565b600060015b828111612fb0576000612f498783613e1e565b905082158015612f5857508015155b15612f885760019250612f6a85613e45565b8015612f765750600181145b15612f88575060009695505050505050565b60078110612f9d575060009695505050505050565b5080612fa8816154a6565b915050612f36565b506000612fbe83600161547a565b90505b600f8111612ff8576007612fd58783613e1e565b14612fe65750600095945050505050565b80612ff0816154a6565b915050612fc1565b50600195945050505050565b6113a4828260405180602001604052806000815250613e6d565b600080600061302c85612490565b5091509150600061303c86611942565b6001600160a01b038416600090815260ca60205260408120805492935060019290919061306a908490615467565b909155506130759050565b6130806000876128b6565b600061308b87611b3c565b600088815260ce602052604081209192506130a691906149a1565b600087815260cf602052604081206130bd916149a1565b600087815260cb602090815260408083206001600160a01b03861684529091528120805473ffffffffffffffffffffffffffffffffffffffff1916905581518190815b818110156132fc5789831061318e5784818151811061312157613121615293565b60200260200101516020015185828151811061313f5761313f615293565b6020908102919091010151516040517f4cb93ad90000000000000000000000000000000000000000000000000000000081526001600160a01b0390921660048301526024820152604401610bba565b60d060008683815181106131a4576131a4615293565b6020026020010151602001516001600160a01b03166001600160a01b0316815260200190815260200160002060008683815181106131e4576131e4615293565b602002602001015160000151815260200190815260200160002060009055828a03935084818151811061321957613219615293565b6020026020010151602001516001600160a01b031663b390c0ab86838151811061324557613245615293565b60200260200101516000015160018761325e9190615467565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925260248201526044016020604051808303816000875af11580156132b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132dd919061548d565b6132e890600161547a565b6132f2908461547a565b9250600101613100565b5060008a815260cd6020526040808220828155600101805473ffffffffffffffffffffffffffffffffffffffff19169055518b91906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4604080518781526000602082018190528c9290916001600160a01b038b16917f04444026cefd1b05506559cab59d1b865ae3ba4ed2fe5c894f04e522776c552d910160405180910390a45098975050505050505050565b6133c384848461293c565b6133cf84848484613eba565b610ca0576040517fbcb5663700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606060d58054611c2b90615073565b606060006134218361401c565b600101905060008167ffffffffffffffff81111561344157613441614a51565b6040519080825280601f01601f19166020018201604052801561346b576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461347557509392505050565b604080518082019091526000808252602082015282156134fd576134f68987612225565b905061350a565b6135078987610ff6565b90505b6135158186866140fe565b821561353857600089815260cf60205260409020613533908761415b565b613572565b6001600160a01b038516600090815260d06020908152604080832087845282528083208390558b835260ce9091529020613572908761415b565b6001600160a01b03881615613691578660000361360b576040517fb88d4fde0000000000000000000000000000000000000000000000000000000081526001600160a01b0386169063b88d4fde906135d49030908c90899088906004016154de565b600060405180830381600087803b1580156135ee57600080fd5b505af1158015613602573d6000803e3d6000fd5b50505050613691565b602081015181516040517f064c0a3a0000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163064c0a3a9161365e9130918d918d90899060040161551a565b600060405180830381600087803b15801561367857600080fd5b505af115801561368c573d6000803e3d6000fd5b505050505b60408051878152841515602082015285916001600160a01b038816918c917f2bedee38cdb22411c14554191243c0e117c0088ddae3459876acd46a0fd53815910160405180910390a461235f565b826136e9856114c0565b5111613721576040517f9136d24f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061372d8585612225565b905061373a8184846140fe565b6001600160a01b038316600090815260d06020908152604080832085845290915290205415613795576040517fff33650c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600085815260cf602052604090206137ad908561415b565b600085815260ce60209081526040808320805460018082018355918552838520865160029092020190815585840151908201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055871680855260d08452828520878652845293829020555186815284929188917f29486b9e2ae569b440933a9b1b421467306fa21f3dcad439c262910a634963a99101612acc565b600080600061385b84612490565b50915091508060001461387e57506001600160a01b038481169116149050610aed565b816001600160a01b0316856001600160a01b031614806138c357506001600160a01b03808316600090815260cc602090815260408083209389168352929052205460ff165b806138e75750846001600160a01b03166138dc85610ca6565b6001600160a01b0316145b95945050505050565b60005b60648110156139e0576000806000856001600160a01b031663fb25fb7a866040518263ffffffff1660e01b815260040161392f91815260200190565b606060405180830381865afa15801561394c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613970919061555d565b925092509250806139845750505050505050565b6001600160a01b0383163014801561399b57508682145b156139d2576040517ff911968900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5090935091506001016138f3565b506040517feb20c44200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805180820182528381526001600160a01b038381166020808401918252600088815260cd90915293842092518355516001909201805473ffffffffffffffffffffffffffffffffffffffff191692909116919091179055610da590846128b6565b6040517f635490cc00000000000000000000000000000000000000000000000000000000815285906001600160a01b0382169063635490cc90613ac190879087908790600401615595565b600060405180830381600087803b158015613adb57600080fd5b505af1158015613aef573d6000803e3d6000fd5b5050505082866001600160a01b0316886001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a482866001600160a01b0316886001600160a01b03167f04444026cefd1b05506559cab59d1b865ae3ba4ed2fe5c894f04e522776c552d8888604051613b83929190918252602082015260400190565b60405180910390a450505050505050565b600054610100900460ff16613c115760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bba565b60d2613c1d838261510c565b5060d3610da5828261510c565b6001600160a01b0381163b613ca75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610bba565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b613cfe8361424d565b600082511180613d0b5750805b15610da557610ca0838361428d565b600054610100900460ff16613d975760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610bba565b61194033612d60565b600080613dac83611942565b9050806001600160a01b0316846001600160a01b03161480613df357506001600160a01b03808216600090815260cc602090815260408083209388168352929052205460ff165b80610dcc5750836001600160a01b0316613e0c84610ca6565b6001600160a01b031614949350505050565b600060076003613e2f84600f615467565b613e3991906155b4565b84901c16905092915050565b6000607a8210613e5757506000919050565b613e608261438f565b60ff166001149050919050565b613e77838361477d565b613e846000848484613eba565b610da5576040517fbcb5663700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001600160a01b0384163b15614014576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290613f179033908990889088906004016154de565b6020604051808303816000875af1925050508015613f52575060408051601f3d908101601f19168201909252613f4f918101906155cb565b60015b613fc9573d808015613f80576040519150601f19603f3d011682016040523d82523d6000602084013e613f85565b606091505b508051600003613fc1576040517fbcb5663700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610dcc565b506001610dcc565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310614065577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310614091576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106140af57662386f26fc10000830492506010015b6305f5e10083106140c7576305f5e100830492506008015b61271083106140db57612710830492506004015b606483106140ed576064830492506002015b600a8310610aed5760010192915050565b82602001516001600160a01b0316826001600160a01b0316141580614124575082518114155b15610da5576040517f37d6ce9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8154829061416b90600190615467565b8154811061417b5761417b615293565b906000526020600020906002020182828154811061419b5761419b615293565b6000918252602090912082546002909202019081556001918201549101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905581548290806141f3576141f36155e8565b60008281526020812060027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90930192830201908155600101805473ffffffffffffffffffffffffffffffffffffffff1916905590555050565b61425681613c2a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61430c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610bba565b600080846001600160a01b0316846040516143279190615330565b600060405180830381855af49150503d8060008114614362576040519150601f19603f3d011682016040523d82523d6000602084013e614367565b606091505b50915091506138e782826040518060600160405280602781526020016156186027913961480d565b60408051610f40810182526000808252602082018190529181018290526060810182905260016080820181905260a0820183905260c0820183905260e08201839052610100820183905261012082018390526101408201839052610160820183905261018082018390526101a082018390526101c082018190526101e08201839052610200820183905261022082018390526102408201839052610260820183905261028082018390526102a082018390526102c082018390526102e08201839052610300820181905261032082018390526103408201839052610360820183905261038082018390526103a082018390526103c082018390526103e08201839052610400820183905261042082018390526104408201839052610460820183905261048082018390526104a082018390526104c082018190526104e08201839052610500820183905261052082018390526105408201839052610560820183905261058082018390526105a082018390526105c082018390526105e08201839052610600820183905261062082018190526106408201839052610660820183905261068082018390526106a082018390526106c082018390526106e08201839052610700820183905261072082018390526107408201819052610760820183905261078082018390526107a082018390526107c082018390526107e08201819052610800820183905261082082018390526108408201839052610860820183905261088082018390526108a082018390526108c082018390526108e08201839052610900820181905261092082018390526109408201839052610960820183905261098082018390526109a082018390526109c082018390526109e08201839052610a008201839052610a208201839052610a408201839052610a608201819052610a808201839052610aa08201839052610ac08201839052610ae08201839052610b008201839052610b208201839052610b408201839052610b608201839052610b808201839052610ba08201839052610bc08201839052610be08201839052610c008201839052610c208201819052610c408201839052610c608201839052610c808201839052610ca08201839052610cc08201839052610ce08201839052610d008201839052610d208201839052610d408201839052610d608201819052610d808201839052610da08201839052610dc08201839052610de08201839052610e008201839052610e208201839052610e408201839052610e608201839052610e808201839052610ea0820152610ec08101829052610ee08101829052610f008101829052610f2081018290528083607a811061477157614771615293565b60200201519392505050565b61478982826000614826565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46040805160008082526020820181905283926001600160a01b038616927f04444026cefd1b05506559cab59d1b865ae3ba4ed2fe5c894f04e522776c552d910160405180910390a45050565b6060831561481c57508161233e565b61233e8383614977565b6001600160a01b038316614866576040517f25bd6bd300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260cd60205260409020600101546001600160a01b0316156148b8576040517fc5a8d37100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000036148f2576040517f238924d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038316600090815260ca6020526040812080546001929061491b90849061547a565b90915550506040805180820182529182526001600160a01b039384166020808401918252600094855260cd905292209051815590516001909101805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b8151156149875781518083602001fd5b8060405162461bcd60e51b8152600401610bba9190614bf5565b508054600082556002029060005260206000209081019061137b91905b80821115611747576000815560018101805473ffffffffffffffffffffffffffffffffffffffff191690556002016149be565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461137b57600080fd5b600060208284031215614a3157600080fd5b813561233e816149f1565b6001600160a01b038116811461137b57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614aa957614aa9614a51565b604052919050565b600067ffffffffffffffff821115614acb57614acb614a51565b50601f01601f191660200190565b600082601f830112614aea57600080fd5b8135614afd614af882614ab1565b614a80565b818152846020838601011115614b1257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215614b4757600080fd5b8535614b5281614a3c565b94506020860135614b6281614a3c565b93506040860135925060608601359150608086013567ffffffffffffffff811115614b8c57600080fd5b614b9888828901614ad9565b9150509295509295909350565b60005b83811015614bc0578181015183820152602001614ba8565b50506000910152565b60008151808452614be1816020860160208601614ba5565b601f01601f19169290920160200192915050565b60208152600061233e6020830184614bc9565b600080600060608486031215614c1d57600080fd5b833567ffffffffffffffff80821115614c3557600080fd5b614c4187838801614ad9565b94506020860135915080821115614c5757600080fd5b50614c6486828701614ad9565b9250506040840135614c7581614a3c565b809150509250925092565b600060208284031215614c9257600080fd5b5035919050565b60008060408385031215614cac57600080fd5b8235614cb781614a3c565b946020939093013593505050565b60008060008060808587031215614cdb57600080fd5b8435614ce681614a3c565b93506020850135614cf681614a3c565b925060408501359150606085013567ffffffffffffffff811115614d1957600080fd5b614d2587828801614ad9565b91505092959194509250565b600060208284031215614d4357600080fd5b813561233e81614a3c565b600080600060608486031215614d6357600080fd5b8335614d6e81614a3c565b92506020840135614d7e81614a3c565b929592945050506040919091013590565b60008060408385031215614da257600080fd5b50508035926020909101359150565b815181526020808301516001600160a01b03169082015260408101610aed565b60008060408385031215614de457600080fd5b8235614def81614a3c565b9150602083013567ffffffffffffffff811115614e0b57600080fd5b614e1785828601614ad9565b9150509250929050565b602080825282518282018190526000919060409081850190868401855b82811015614e7457614e64848351805182526020908101516001600160a01b0316910152565b9284019290850190600101614e3e565b5091979650505050505050565b600060208284031215614e9357600080fd5b813567ffffffffffffffff811115614eaa57600080fd5b610dcc84828501614ad9565b600080600060608486031215614ecb57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115614ef057600080fd5b614efc86828701614ad9565b9150509250925092565b801515811461137b57600080fd5b60008060408385031215614f2757600080fd5b8235614f3281614a3c565b91506020830135614f4281614f06565b809150509250929050565b600080600080600080600080610100898b031215614f6a57600080fd5b883597506020890135614f7c81614a3c565b965060408901359550606089013594506080890135614f9a81614a3c565b935060a0890135925060c0890135614fb181614f06565b915060e089013567ffffffffffffffff811115614fcd57600080fd5b614fd98b828c01614ad9565b9150509295985092959890939650565b60008060008060808587031215614fff57600080fd5b8435935060208501359250604085013561501881614a3c565b9396929550929360600135925050565b6000806040838503121561503b57600080fd5b823561504681614a3c565b91506020830135614f4281614a3c565b60006020828403121561506857600080fd5b815161233e81614a3c565b600181811c9082168061508757607f821691505b6020821081036150c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115610da557600081815260208120601f850160051c810160208610156150ed5750805b601f850160051c820191505b81811015610b0a578281556001016150f9565b815167ffffffffffffffff81111561512657615126614a51565b61513a816151348454615073565b846150c6565b602080601f83116001811461518d57600084156151575750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610b0a565b600085815260208120601f198616915b828110156151bc5788860151825594840194600190910190840161519d565b50858210156151f857878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083526000845461521c81615073565b8084870152604060018084166000811461523d576001811461525757615285565b60ff198516838a01528284151560051b8a01019550615285565b896000528660002060005b8581101561527d5781548b8201860152908301908801615262565b8a0184019650505b509398975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156152d457600080fd5b815167ffffffffffffffff8111156152eb57600080fd5b8201601f810184136152fc57600080fd5b805161530a614af882614ab1565b81815285602083850101111561531f57600080fd5b6138e7826020830160208601614ba5565b60008251615342818460208701614ba5565b9190910192915050565b60008451602061535f8285838a01614ba5565b8551918401916153728184848a01614ba5565b7f3f6e616d653d0000000000000000000000000000000000000000000000000000920191825284546006906000906153a981615073565b600182811680156153c157600181146153da5761540a565b60ff19841686890152858315158402890101945061540a565b8a6000528660002060005b848110156154005781548a82018901529083019088016153e5565b5050858389010194505b50929b9a5050505050505050505050565b60006020828403121561542d57600080fd5b815161233e81614f06565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610aed57610aed615438565b80820180821115610aed57610aed615438565b60006020828403121561549f57600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036154d7576154d7615438565b5060010190565b60006001600160a01b038087168352808616602084015250836040830152608060608301526155106080830184614bc9565b9695505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261555260a0830184614bc9565b979650505050505050565b60008060006060848603121561557257600080fd5b835161557d81614a3c565b602085015160408601519194509250614c7581614f06565b8381528260208201526060604082015260006138e76060830184614bc9565b8082028115828204841417610aed57610aed615438565b6000602082840312156155dd57600080fd5b815161233e816149f1565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201630ed695a0f4e54cc92ba0778e9b1cf1a6133ed68b11914e16cb525fb50916864736f6c63430008120033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptChild(uint256,uint256,address,uint256)": {
        "details": "This moves the child token from parent token's pending child tokens array into the active child tokens  array.",
        "params": {
          "childAddress": "Address of the collection smart contract of the child token expected to be located at the  specified index of the given parent token's pending children array",
          "childId": "ID of the child token expected to be located at the specified index of the given parent token's  pending children array",
          "childIndex": "Index of a child tokem in the given parent's pending children array",
          "parentId": "ID of the parent token for which the child token is being accepted"
        }
      },
      "addChild(uint256,uint256,bytes)": {
        "details": "This adds the iichild token into the given parent token's pending child tokens array.You MUST NOT call this method directly. To add a a child to an NFT you must use either  `nestTransfer`, `nestMint` or `transferChild` to the NFT.Requirements:  - `ownerOf` on the child contract must resolve to the called contract.  - The pending array of the parent contract must not be full.",
        "params": {
          "childId": "ID of the new proposed child token",
          "data": "Additional data with no specified format",
          "parentId": "ID of the parent token to receive the new child token"
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "burn(uint256)": {
        "params": {
          "tokenId": "ID of the token to burn"
        }
      },
      "burn(uint256,uint256)": {
        "details": "When a token is burned, its children are recursively burned as well.The approvals are cleared when the token is burned.Requirements:  - `tokenId` must exist.Emits a {Transfer} event.",
        "params": {
          "maxChildrenBurns": "Maximum children to recursively burn",
          "tokenId": "ID of the token to burn"
        },
        "returns": {
          "_0": "uint256 The number of recursive burns it took to burn all of the children"
        }
      },
      "childIsInActive(address,uint256)": {
        "params": {
          "childAddress": "Address of the given token's collection smart contract",
          "childId": "ID of the child token being checked"
        },
        "returns": {
          "_0": "bool A boolean value signifying whether the given child token is included in an active child tokens array  of a token (`true`) or not (`false`)"
        }
      },
      "childOf(uint256,uint256)": {
        "details": "Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
        "params": {
          "index": "Index of the child token in the parent token's active child tokens array",
          "parentId": "ID of the parent token for which the child is being retrieved"
        },
        "returns": {
          "_0": "struct A Child struct containing data about the specified child"
        }
      },
      "childrenOf(uint256)": {
        "details": "Returns array of Child structs existing for parent token.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
        "params": {
          "parentId": "ID of the parent token for which to retrieve the active child tokens"
        },
        "returns": {
          "_0": "struct[] An array of Child structs containing the parent token's active child tokens"
        }
      },
      "directOwnerOf(uint256)": {
        "details": "In the event the NFT is owned by an externally owned account, `tokenId` will be `0`.",
        "params": {
          "tokenId": "ID of the token for which the immediate owner is being retrieved"
        },
        "returns": {
          "_0": "address Address of the immediate owner. If the token is owned by an externally owned account, its address  will be returned. If the token is owned by another token, the parent token's collection smart contract address  is returned",
          "_1": "uint256 Token ID of the immediate owner. If the immediate owner is an externally owned account, the value  should be `0`",
          "_2": "bool A boolean value signifying whether the immediate owner is a token (`true`) or not (`false`)"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nestTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "The destination token MUST NOT be a child token of the token being transferred or one of its downstream  child tokens.",
        "params": {
          "destinationId": "ID of the token to receive the token being transferred",
          "from": "Address of the direct owner of the token to be transferred",
          "to": "Address of the receiving token's collection smart contract",
          "tokenId": "ID of the token being transferred"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Root owner is always the externally owned account.If the given token is owned by another token, it will recursively query the parent tokens until reaching the  root owner.",
        "params": {
          "tokenId": "ID of the token for which the root owner is being retrieved"
        },
        "returns": {
          "_0": "address Address of the root owner of the given token"
        }
      },
      "pendingChildOf(uint256,uint256)": {
        "details": "Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
        "params": {
          "index": "Index of the child token in the parent token's pending child tokens array",
          "parentId": "ID of the parent token for which the pending child token is being retrieved"
        },
        "returns": {
          "_0": "struct A Child struct containting data about the specified child"
        }
      },
      "pendingChildrenOf(uint256)": {
        "details": "Returns array of pending Child structs existing for given parent.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
        "params": {
          "parentId": "ID of the parent token for which to retrieve the pending child tokens"
        },
        "returns": {
          "_0": "struct[] An array of Child structs containing the parent token's pending child tokens"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "rejectAllChildren(uint256,uint256)": {
        "details": "Removes the children from the pending array mapping.This does not update the ownership storage data on children. If necessary, ownership can be reclaimed by the  rootOwner of the previous parent.",
        "params": {
          "tokenId": "ID of the parent token for which to reject all of the pending tokens"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": {
        "params": {
          "childAddress": "Address of the child token's collection smart contract.",
          "childId": "ID of the child token in its own collection smart contract.",
          "childIndex": "Index of a token we are transferring, in the array it belongs to (can be either active array or  pending array)",
          "data": "Additional data with no specified format, sent in call to `_to`",
          "destinationId": "ID of the token to receive this child token (MUST be 0 if the destination is not a token)",
          "isPending": "A boolean value indicating whether the child token being transferred is in the pending array of the  parent token (`true`) or in the active array (`false`)",
          "to": "Address to which to transfer the token to",
          "tokenId": "ID of the parent token from which the child token is being transferred"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptChild(uint256,uint256,address,uint256)": {
        "notice": "@notice Used to accept a pending child token for a given parent token."
      },
      "addChild(uint256,uint256,bytes)": {
        "notice": "Used to add a child token to a given parent token."
      },
      "burn(uint256)": {
        "notice": "Used to burn a given token."
      },
      "burn(uint256,uint256)": {
        "notice": "Used to burn a token."
      },
      "childIsInActive(address,uint256)": {
        "notice": "Used to verify that the given child tokwn is included in an active array of a token."
      },
      "childOf(uint256,uint256)": {
        "notice": "Used to retrieve a specific active child token for a given parent token."
      },
      "childrenOf(uint256)": {
        "notice": "Used to retrieve the active child tokens of a given parent token."
      },
      "directOwnerOf(uint256)": {
        "notice": "Used to retrieve the immediate owner of the given token."
      },
      "nestTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "Used to transfer the token into another token."
      },
      "ownerOf(uint256)": {
        "notice": "Used to retrieve the root owner of the given token."
      },
      "pendingChildOf(uint256,uint256)": {
        "notice": "Used to retrieve a specific pending child token from a given parent token."
      },
      "pendingChildrenOf(uint256)": {
        "notice": "Used to retrieve the pending child tokens of a given parent token."
      },
      "rejectAllChildren(uint256,uint256)": {
        "notice": "Used to reject all pending children of a given parent token."
      },
      "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": {
        "notice": "Used to transfer a child token from a given parent token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 534,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 537,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 516,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 831,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3390,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5777,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "controllers",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7759,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_balances",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7765,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))"
      },
      {
        "astId": 7771,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7776,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_directOwners",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_struct(DirectOwner)7168_storage)"
      },
      {
        "astId": 7782,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_activeChildren",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_array(t_struct(Child)7221_storage)dyn_storage)"
      },
      {
        "astId": 7788,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_pendingChildren",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_array(t_struct(Child)7221_storage)dyn_storage)"
      },
      {
        "astId": 7794,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_childIsInActive",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7798,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "tokenNames",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7800,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_name",
        "offset": 0,
        "slot": "210",
        "type": "t_string_storage"
      },
      {
        "astId": 7802,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_symbol",
        "offset": 0,
        "slot": "211",
        "type": "t_string_storage"
      },
      {
        "astId": 7805,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "212",
        "type": "t_struct(Counter)5627_storage"
      },
      {
        "astId": 7807,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_baseUri",
        "offset": 0,
        "slot": "213",
        "type": "t_string_storage"
      },
      {
        "astId": 7809,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_namingToken",
        "offset": 0,
        "slot": "214",
        "type": "t_address"
      },
      {
        "astId": 7811,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "_mnsToken",
        "offset": 0,
        "slot": "215",
        "type": "t_address"
      },
      {
        "astId": 10476,
        "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
        "label": "__gap",
        "offset": 0,
        "slot": "216",
        "type": "t_array(t_uint256)35_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Child)7221_storage)dyn_storage": {
        "base": "t_struct(Child)7221_storage",
        "encoding": "dynamic_array",
        "label": "struct IERC6059.Child[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)35_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[35]",
        "numberOfBytes": "1120"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(Child)7221_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IERC6059.Child[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Child)7221_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(DirectOwner)7168_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IERC6059.DirectOwner)",
        "numberOfBytes": "32",
        "value": "t_struct(DirectOwner)7168_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Child)7221_storage": {
        "encoding": "inplace",
        "label": "struct IERC6059.Child",
        "members": [
          {
            "astId": 7218,
            "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7220,
            "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
            "label": "contractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)5627_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 5626,
            "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DirectOwner)7168_storage": {
        "encoding": "inplace",
        "label": "struct IERC6059.DirectOwner",
        "members": [
          {
            "astId": 7165,
            "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7167,
            "contract": "contracts/token/MEP1002Token.sol:ProxiedMEP1002Token",
            "label": "ownerAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}